lang.name = Lang File Linking
lang.version = v1.0.0

# FILE type
# Examples:
#     /home/name/path [Linux]
#     C://Users/name/path [Windows]
#     relative/path {The path is relative to the location of
#                    the executed lang file}
# Use '/' as file seperator

# Get path to the executed lang file (Will be used for relative
#                                     paths)
func.printTerminal(-1, $LANG_PATH)

# Link Lang file
# linker.link(FILE) # Will execute the lang file FILE
#                     and will copy all translations from
#                     the lang file to the local translations
#                     ("lang." translations won't be copied)
linker.link(10_linkTestTranslations.lang)

fp.gtv = func.getTranslationValue # Copy func.getTranslationValue for shorter code

func.printTerminal(-1, fp.gtv(test.name), fp.gtv(test.age), fp.gtv(test.data))
func.printTerminal(-1, $var) # Will print "$var", because $var is no translation
fp.printTest(42) # Will throw an error
func.printError()
func.println()

# linker.link(FILE, (any)) # &LANG_ARGS can be set for the linked lang file
linker.link(10_linkTestLangArgs.lang)
linker.link(10_linkTestLangArgs.lang, arg1, arg2)
linker.link(10_linkTestLangArgs.lang, 42, 0000.02, linker.link) # Arguments will automatically be cast to Text values
func.println()

# Bind Library
# linker.bindLibrary(FILE) # Will execute the lang file FILE
#                            and will copy everything execept
#                            translations (Final attribute will
#                            be copied too) (If local final variable
#                            name is in the lang file FILE, it won't
#                            be copied) ("$LANG" vars won't be copied)
linker.bindLibrary(10_linkTestLibrary.lang)
func.printTerminal(-1, fp.gtv(lib.name)) # Will print "Error":
                                         # lib.name will not
                                         # be copied
func.printTerminal(-1, $lib_var)
fp.libTest(--- Test_42 ---)
func.println()

# linker.bindLibrary(FILE, (any)) # &LANG_ARGS can be set for the linked lang file
linker.bindLibrary(10_linkTestLangArgs.lang)
linker.bindLibrary(10_linkTestLangArgs.lang, arg1, arg2)
linker.bindLibrary(10_linkTestLangArgs.lang, 42, 0000.02, linker.link) # Arguments will automatically be cast to Text values
func.println()

# Include
# linker.include(FILE) # Will execute the lang file FILE and will
#                        copy all translations and all variables
#                        with the same restrictions as linker.link
#                        and linker.bindLibrary
linker.include(10_linkTestAll.lang)

func.printTerminal(-1, fp.gtv(lib2.name), fp.gtv(lib2.data))
func.printTerminal(-1, $lib2_var)
fp.lib2Test(--- TEST ---)
func.println()

# linker.include(FILE, (any)) # &LANG_ARGS can be set for the linked lang file
linker.include(10_linkTestLangArgs.lang)
linker.include(10_linkTestLangArgs.lang, arg1, arg2)
linker.include(10_linkTestLangArgs.lang, 42, 0000.02, linker.link) # Arguments will automatically be cast to Text values
func.println()

# Return value from executed lang file
$i
repeat($[i], 4) {
	func.printTerminal(1, \nRun num $i:)
	$ret = linker.link(10_linkTestReturn.lang)
	func.printTerminal(1, Returned value: "$ret")
}
func.println()

# Thrown value from executed lang file
$ret = linker.link(10_linkTestThrow.lang)
func.println(Returned: $ret: func.errorCode($ret) [func.errorText($ret)])
