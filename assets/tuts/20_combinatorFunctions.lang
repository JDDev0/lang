lang.name = Combinator functions
lang.version = v1.0.0

# Finite argument functions
# A0: func.combA0(a)
# A : func.combA(a, b)
# A2: func.combA2(a, b, c)
# A3: func.combA3(a, b, c, d)
# A4: func.combA4(a, b, c, d, e)
# AE: func.combAE(a, b)
# AX: func.combAX(a, b, c, d)
# B0: func.combB0(a, b)
# B : func.combB(a, b, c)
# B2: func.combB2(a, b, c, d)
# B3: func.combB3(a, b, c, d, e)
# BE: func.combBE(a, b, c)
# BX: func.combBX(a, b, c, d)
# C0: func.combC0(a, b, c)
# C1: func.combC1(a, b, c)
# C : func.combC(a, b, c)
# C3: func.combC3(a, b, c, d)
# C4: func.combC4(a, b, c, d, e)
# CE: func.combCE(a, b, c)
# CX: func.combCX(a, b, c, d)
# D : func.combD(a, b, c, d)
# DE: func.combDE(a, b, c, d)
# E : func.combE(a, b, c, d, e)
# EE: func.combEE(a, b, c, d, e)
# EX: func.combEX(a, b, c, d, e)
# F1: func.combF1(a, b, c)
# F : func.combF(a, b, c)
# F3: func.combF3(a, b, c, d)
# F4: func.combF4(a, b, c, d, e)
# FE: func.combFE(a, b, c)
# G : func.combG(a, b, c, d)
# GE: func.combGE(a, b, c, d)
# H : func.combH(a, b, c)
# HB: func.combHB(a, b, c, d)
# HE: func.combHE(a, b, c)
# HX: func.combHX(a, b, c)
# I : func.combI(a)
# J : func.combJ(a, b, c, d)
# JE: func.combJE(a, b, c, d)
# JX: func.combJX(a, b, c, d)
# K : func.combK(a, b)
# K3: func.combK3(a, b, c)
# K4: func.combK4(a, b, c, d)
# K5: func.combK5(a, b, c, d, e)
# KD: func.combKD(a, b, c, d)
# KE: func.combKE(a, b, c, d, e)
# KI: func.combKI(a, b)
# KX: func.combKX(a, b, c)
# L : func.combL(a, b)
# L2: func.combL2(a, b, c)
# L3: func.combL3(a, b, c, d)
# L4: func.combL4(a, b, c, d, e)
# M : func.combM(a)
# M2: func.combM2(a, b)
# M3: func.combM3(a, b, c)
# M4: func.combM4(a, b, c, d)
# M5: func.combM5(a, b, c, d, e)
# O : func.combO(a, b)
# O2: func.combO2(a, b, c)
# O3: func.combO3(a, b, c, d)
# O4: func.combO4(a, b, c, d, e)
# P : func.combP(a, b, c, d)
# P3: func.combP3(a, b, c, d, e)
# PE: func.combPE(a, b, c, d)
# PX: func.combPX(a, b, c, d)
# Q : func.combQ(a, b, c)
# QE: func.combQE(a, b, c)
# QX: func.combQX(a, b, c)
# R0: func.combR0(a, b, c)
# R1: func.combR1(a, b, c)
# R : func.combR(a, b, c)
# R3: func.combR3(a, b, c, d)
# R4: func.combR4(a, b, c, d, e)
# RE: func.combRE(a, b, c)
# RX: func.combRX(a, b, c)
# S : func.combS(a, b, c)
# SX: func.combSX(a, b, c)
# T : func.combT(a, b)
# T3: func.combT3(a, b, c, d)
# T4: func.combT4(a, b, c, d, e)
# TX: func.combTX(a, b, c, d)
# U : func.combU(a, b, c, d, e)
# UX: func.combUX(a, b, c, d, e)
# V1: func.combV1(a, b, c)
# V : func.combV(a, b, c)
# V3: func.combV3(a, b, c, d)
# W : func.combW(a, b)
# W3: func.combW3(a, b)
# W4: func.combW4(a, b)
# WB: func.combWB(a, b, c)
# WX: func.combWX(a, b)
# X1: func.combX1(a, b, c, d)
# X2: func.combX2(a, b, c, d)
# X3: func.combX3(a, b, c, d)
# X4: func.combX4(a, b, c, d)
# X5: func.combX5(a, b, c, d)
# X6: func.combX6(a, b, c, d)
# X7: func.combX7(a, b, c, d)
# X8: func.combX8(a, b, c, d)
# X9: func.combX9(a, b, c, d)
# XA: func.combXA(a, b, c, d)
# XB: func.combXB(a, b, c, d)

# Array argument functions
# AV: func.combAV(a, args)
# BV: func.combBV(a, b, args)
# PV: func.combPV(a, b, args)
# QV: func.combQV(a, args)
# TV: func.combTV(args, z)

# Infinite argument functions
# AN: func.combAN(a, ...)
# AZ: func.combAZ(a, ...)
# BN: func.combBN(a, b, ...)
# BZ: func.combBZ(a, b, ...)
# PN: func.combPN(a, b, ...)
# PZ: func.combPZ(a, b, ...)
# QN: func.combQN(a, ...)
# QZ: func.combQZ(a, ...)
# TN: func.combTN(..., z)
# TZ: func.combTZ(..., z)

# Fixed-point combinator functions
# Y : func.combY(f)

# Combinator functions
# Comb | #Args | Arguments     | Func args   | Execution                      | Comment
# =====|=======|===============|=============|================================|===========================================================
# A0   | 1     | a             | a           | a()                            | -
# A    | 2     | a, b          | a           | a(b)                           | -
# A2   | 3     | a, b, c       | a           | a(b, c)                        | -
# A3   | 4     | a, b, c, d    | a           | a(b, c, d)                     | -
# A4   | 5     | a, b, c, d, e | a           | a(b, c, d, e)                  | -
# AE   | 2     | a, b          | a           | a()                            | -
# AN   | 1+    | a, ...        | a           | a(...[0], ...[1], ...)         | -
# AV   | 2     | a, args[]     | a           | a(args[0], args[1], ...)       | -
# AX   | 4     | a, b, c, d    | a           | a(b, d, c)                     | -
# AZ   | 1+    | a, ...        | a           | a(..., ...[1], ...[0])         | Same as AN but with inverse varargs ordering
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# B0   | 2     | a, b          | a b         | a(b())                         | -
# B    | 3     | a, b, c       | a b         | a(b(c))                        | -
# B2   | 4     | a, b, c, d    | a b         | a(b(c), b(d))                  | -
# B3   | 5     | a, b, c, d, e | a b         | a(b(c), b(d), b(e))            | -
# BE   | 3     | a, b, c       | a b         | a(b())                         | -
# BN   | 2+    | a, b, ...     | a b         | a(b(...[0]), b(...[1]), ...)   | Every varargs argument will be passed to b first
# BV   | 3     | a, b, args[]  | a b         | a(b(args[0]), b(args[1]), ...) | Every array element will be passed to b first
# BX   | 4     | a, b, c, d    | a b         | a(b(c, d))                     | -
# BZ   | 2+    | a, b, ...     | a b         | a(..., b(...[1]), b(...[0]))   | Same as BN but with inverse varargs ordering
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# C0   | 3     | a, b, c       | a           | a(b)                           | -
# C1   | 3     | a, b, c       | a           | a(c)                           | -
# C    | 3     | a, b, c       | a           | a(c, b)                        | -
# C3   | 4     | a, b, c, d    | a           | a(d, c, b)                     | -
# C4   | 5     | a, b, c, d, e | a           | a(e, d, c, b)                  | -
# CE   | 3     | a, b, c       | a           | a()                            | -
# CX   | 4     | a, b, c, d    | a           | a(c, d, b)                     | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# D    | 4     | a, b, c, d    | a   c       | a(b, c(d))                     | -
# DE   | 4     | a, b, c, d    | a   c       | a(c())                         | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# E    | 5     | a, b, c, d, e | a   c       | a(b, c(d, e))                  | -
# EE   | 5     | a, b, c, d, e | a   c       | a(b, c())                      | -
# EX   | 5     | a, b, c, d, e | a b         | a(c, b(d, e))                  | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# F1   | 3     | a, b, c       |     c       | c(b)                           | -
# F    | 3     | a, b, c       |     c       | c(b, a)                        | -
# F3   | 4     | a, b, c, d    |       d     | d(c, b, a)                     | -
# F4   | 5     | a, b, c, d, e |         e   | e(d, c, b, a)                  | -
# FE   | 3     | a, b, c       |     c       | c()                            | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# G    | 4     | a, b, c, d    | a b         | a(d, b(c))                     | -
# GE   | 4     | a, b, c, d    | a b         | a(d, b())                      | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# H    | 3     | a, b, c       | a           | a(b, c, b)                     | -
# HB   | 4     | a, b, c, d    | a b         | a(b(c), b(d), b(c))            | -
# HE   | 3     | a, b, c       | a b c       | a(b(), c(), b())               | -
# HX   | 3     | a, b, c       | a           | a(c, b, c)                     | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# I    | 1     | a             |             | a                              | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# J    | 4     | a, b, c, d    | a           | a(b, a(d, c))                  | -
# JX   | 4     | a, b, c, d    | a           | a(b, a(c, d))                  | -
# JE   | 4     | a, b, c, d    | a           | a(b, a())                      | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# K    | 2     | a, b          |             | a                              | -
# K3   | 3     | a, b, c       |             | a                              | -
# K4   | 4     | a, b, c, d    |             | a                              | -
# K5   | 5     | a, b, c, d, e |             | a                              | -
# KD   | 4     | a, b, c, d    |             | d                              | -
# KE   | 5     | a, b, c, d, e |             | e                              | -
# KI   | 2     | a, b          |             | b                              | -
# KX   | 3     | a, b, c       |             | c                              | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# L    | 2     | a, b          | a b         | a(b(b))                        | -
# L2   | 3     | a, b, c       | a b         | a(b(b, c))                     | -
# L3   | 4     | a, b, c, d    | a b         | a(b(b, c, d))                  | -
# L4   | 5     | a, b, c, d, e | a b         | a(b(b, c, d, e))               | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# M    | 1     | a             | a           | a(a)                           | -
# M2   | 2     | a, b          | a           | a(a, b)                        | -
# M3   | 3     | a, b, c       | a           | a(a, b, c)                     | -
# M4   | 4     | a, b, c, d    | a           | a(a, b, c, d)                  | -
# M5   | 5     | a, b, c, d, e | a           | a(a, b, c, d, e)               | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# O    | 2     | a, b          | a b         | b(a(b))                        | -
# O2   | 3     | a, b, c       | a b         | b(a(b, c))                     | -
# O3   | 4     | a, b, c, d    | a b         | b(a(b, c, d))                  | -
# O4   | 5     | a, b, c, d, e | a b         | b(a(b, c, d, e))               | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# P    | 4     | a, b, c, d    | a b c       | a(b(d), c(d))                  | -
# P3   | 5     | a, b, c, d, e | a b c d     | a(b(e), c(e), d(e))            | -
# PE   | 4     | a, b, c, d    | a b c       | a(b(), c())                    | -
# PN   | 2+    | a, b, ...     | a         + | a(...[0](b), ...[1](b), ...)   | Every varargs argument will be applied on b first
# PV   | 3     | a, b, args[]  | a         + | a(args[0](b), args[1](b), ...) | Every array element will be applied on b first
# PX   | 4     | a, b, c, d    | a b c       | a(c(d), b(d))                  | -
# PZ   | 2+    | a, b, ...     | a         + | a(..., ...[1](b), ...[0](b))   | Same as PN but with inverse varargs ordering
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# Q    | 3     | a, b, c       | a b         | b(a(c))                        | -
# QE   | 3     | a, b, c       | a b         | b(a())                         | -
# QN   | 1+    | a, ...        |           + | ...(...[1](...[0](a)))         | Every varargs argument will be consecutively applied on a
# QV   | 2     | a, args[]     |           + | ...(args[1](args[0](a)))       | Every array element will be consecutively applied on a
# QX   | 3     | a, b, c       |   b c       | c(b(a))                        | -
# QZ   | 1+    | a, ...        |           + | ...[0](...[1](...(a)))         | Same as QN but with inverse varargs ordering
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# R0   | 3     | a, b, c       |   b         | b(a)                           | -
# R1   | 3     | a, b, c       |   b         | b(c)                           | -
# R    | 3     | a, b, c       |   b         | b(c, a)                        | -
# R3   | 4     | a, b, c, d    |   b         | b(d, c, a)                     | -
# R4   | 5     | a, b, c, d, e |   b         | b(e, d, c, a)                  | -
# RE   | 3     | a, b, c       |   b         | b()                            | -
# RX   | 3     | a, b, c       |   b         | b(a, c)                        | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# S    | 3     | a, b, c       | a b         | a(c, b(c))                     | -
# SX   | 3     | a, b, c       | a b         | a(b(c), c)                     | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# T    | 2     | a, b          |   b         | b(a)                           | -
# T3   | 4     | a, b, c, d    |   b         | b(a, c, d)                     | -
# T4   | 5     | a, b, c, d, e |   b         | b(a, c, d, e)                  | -
# TN   | 1+    | ..., z        |           + | ...(...[1](...[0](z)))         | Every varargs argument will be consecutively applied on z
# TV   | 2     | args[], z     |           + | ...(args[1](args[0](z)))       | Every array element will be consecutively applied on z
# TX   | 4     | a, b, c, d    |   b         | b(d, c, a)                     | -
# TZ   | 1+    | ..., z        |           + | ...[0](...[1](...(z)))         | Same as TN but with inverse varargs ordering
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# U    | 5     | a, b, c, d, e | a b c       | a(b(d), c(e))                  | -
# UX   | 5     | a, b, c, d, e | a     d e   | a(d(b), e(c))                  | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# V1   | 3     | a, b, c       |     c       | c(a)                           | -
# V    | 3     | a, b, c       |     c       | c(a, b)                        | -
# V3   | 4     | a, b, c, d    |       d     | d(a, b, c)                     | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# W    | 2     | a, b          | a           | a(b, b)                        | -
# W3   | 2     | a, b          | a           | a(b, b, b)                     | -
# W4   | 2     | a, b          | a           | a(b, b, b, b)                  | -
# WB   | 3     | a, b, c       | a b         | a(b(c), b(c))                  | -
# WX   | 2     | a, b          |   b         | b(a, a)                        | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# X1   | 4     | a, b, c, d    | a b         | a(b(c), d)                     | -
# X2   | 4     | a, b, c, d    | a b         | a(c, b(d))                     | -
# X3   | 4     | a, b, c, d    | a b         | a(b(c, d), c)                  | -
# X4   | 4     | a, b, c, d    | a b         | a(b(d, c), d)                  | -
# X5   | 4     | a, b, c, d    | a b         | a(c, b(d, c))                  | -
# X6   | 4     | a, b, c, d    | a b         | a(d, b(c, d))                  | -
# X7   | 4     | a, b, c, d    | a b         | a(b(c, d), b(d, c))            | -
# X8   | 4     | a, b, c, d    | a b         | a(b(c, c), b(d, d))            | -
# X9   | 4     | a, b, c, d    | a b         | a(b(d, d), b(c, c))            | -
# XA   | 4     | a, b, c, d    | a b         | a(b(c, d, c), b(d, c, d))      | -
# XB   | 4     | a, b, c, d    | a b         | a(b(d, c, d), b(c, d, c))      | -
# -----|-------|---------------|-------------|--------------------------------|-----------------------------------------------------------
# Y    | 1     | f             |           f | (x -> f(x(x)))(x -> f(x(x)))   | -

# Examples
# A0
func.println(Examples A0)
func.println(===========)
func.println()

# A0-1: Map to executed functions
func.println(Example A0-1: Map to executed functions)
func.println(---------------------------------------)
&funcs $= [func.rand, func.currentTimeMillis, func.randChoice, func.currentUnixTime, func.randi, func.randl, func.randf, func.randd]
&executedFuncs = func.arrayMapToNew(&funcs, func.combA0)

func.println({{{[func.rand, func.currentTimeMillis, func.randChoice, func.currentUnixTime, func.randi, func.randl, func.randf, func.randd]}}})
func.println(&executedFuncs)

func.printf(%n%n)

# A
func.println(Examples  A)
func.println(===========)
func.println()

# A-1: Execute a function on every element
func.println(Example A-1: Execute a function on every element)
func.println(------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]
func.println(&values)

func.arrayMap(&values, func.combA(func.inc))
func.println(&values)

func.printf(%n%n)

# A2
func.println(Examples A2)
func.println(===========)
func.println()

# A2-1: Add a number to every element
func.println(Example A2-1: Add a number to every element)
func.println(-------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]
func.println(&values)

func.arrayMap(&values, func.combA2(func.add, 42))
func.println(&values)

func.println()

# A2-2: Output every element with format
func.println(Example A2-2: Output every element with format)
func.println(----------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]

func.arrayForEach(&values, func.combA2(func.printf, {{{This is a value: "%5.2f"%n}}}))

func.printf(%n%n)

# A3
func.println(Examples A3)
func.println(===========)
func.println()

# A3-1: Output every element with index with format
func.println(Example A3-1: Output every element with index with format)
func.println(---------------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]

func.arrayEnumerate(&values, func.combA3(func.printf, {{{The element at the index %d is "%s"%n}}}))

func.println()

# A3-2: Output every element with index after value
func.println(Example A3-2: Output every element with index after value)
func.println(---------------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]

func.arrayEnumerate(&values, func.combA3(func.printf, {{{Value "%[2]10s" (Index: %d)%n}}}))

func.printf(%n%n)

# A4
func.println(Examples A4)
func.println(===========)
func.println()

element.index.txt = is at the index

# A4-1: Output every element with index with format and additional value
func.println(Example A4-1: Output every element with index with format and additional value)
func.println(------------------------------------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]

func.arrayEnumerate(&values, func.combA4(func.printf, {{{"%[3]7s" %[1]t 0x%[2]02x%n}}}, element.index.txt))

func.printf(%n%n)

# AE
func.println(Examples AE)
func.println(===========)
func.println()

# AE-1: Filter random elements from an array
func.println(Example AE-1: Filter random elements from an array)
func.println(--------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]

func.println(&values)
func.println(func.arrayFiltered(&values, func.combAE(func.randb)))
func.println(func.arrayFiltered(&values, func.combAE(func.randb)))
func.println(func.arrayFiltered(&values, func.combAE(func.randb)))
func.println(func.arrayFiltered(&values, func.combAE(func.randb)))

func.printf(%n%n)

# AN
func.println(Examples AN)
func.println(===========)
func.println()

element.index.txt = is at the index

# AN-1: Output every element with additional information
func.println(Example AN-1: Output every element with additional information)
func.println(--------------------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]

func.arrayEnumerate(&values, func.combAN(func.printf, {{{The element "%[4]7s" ("%[4]5.2f") is located in %[2]s (Len: %[1]d) at index %[3]d!%n}}}, func.len(&values), &values))

func.println()

# AN-2: Output every element with and without index with the same function call
func.println(Example AN-2: Output every element with and without index with the same function call)
func.println(-------------------------------------------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]

fp.arrayFunc = func.combAN(func.println, Element-Data)

func.arrayForEach(&values, fp.arrayFunc)
func.println(---)
func.arrayEnumerate(&values, fp.arrayFunc)

func.printf(%n%n)

# AV
func.println(Examples AV)
func.println(===========)
func.println()

# AV-1: Map every element to the sum of its elements [Auto-unpack]
func.println(Example AV-1: Map every element to the sum of its elements [Auto-unpack])
func.println(------------------------------------------------------------------------)
&values $= [func.arrayOf(1, 2, 3), func.arrayOf(20, 40), func.arrayOf(10, 2, 5, 5.423, 1), func.arrayOf(10, 2, 5, 5.423f, 1)]

func.arrayMap(&values, func.combAV(func.addf))

func.println(&values)

func.printf(%n%n)

# AX
func.println(Examples AX)
func.println(===========)
func.println()

# AX-1: Output every element with index after value without specified index in func.printf
func.println(Example AX-1: Output every element with index after value without specified index in func.printf)
func.println(------------------------------------------------------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]

func.arrayEnumerate(&values, func.combAX(func.printf, {{{Value "%7s" (Index: %d)%n}}}))

func.printf(%n%n)

# AZ
func.println(Examples AZ)
func.println(===========)
func.println()

# AZ-1: Output every element with and without index with the same function call in reverse order
func.println(Example AZ-1: Output every element with and without index with the same function call reverse order)
func.println(---------------------------------------------------------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3), a]

fp.arrayFunc = func.combAZ(func.println, Element-Data)

func.arrayForEach(&values, fp.arrayFunc)
func.println(---)
func.arrayEnumerate(&values, fp.arrayFunc)

func.printf(%n%n)

# B0
func.println(Examples B0)
func.println(===========)
func.println()

# B0-1: Map to executed functions and pass to other function
func.println(Example B0-1: Map to executed functions and pass to other function)
func.println(------------------------------------------------------------------)
&funcs $= [func.rand, func.currentTimeMillis, func.currentUnixTime, func.randi, func.randl, func.randf, func.randd]
&executedFuncs = func.arrayMapToNew(&funcs, func.combB0(func.inv))

func.println({{{[func.rand, func.currentTimeMillis, func.randChoice, func.currentUnixTime, func.randi, func.randl, func.randf, func.randd]}}})
func.println(&executedFuncs)

func.printf(%n%n)

# B
func.println(Examples  B)
func.println(===========)
func.println()

# B-1: Map to the incremented inversed value
func.println(Example B-1: Map to the incremented inversed value)
func.println(--------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3)]
func.println(&values)

func.arrayMap(&values, func.combB(func.inc, func.inv))
func.println(&values)

func.printf(%n%n)

# B2
func.println(Examples B2)
func.println(===========)
func.println()

# B2-1: Output to int casted elements with index
func.println(Example B2-1: Output to int casted elements with index)
func.println(------------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3)]
func.println(&values)

func.arrayEnumerate(&values, func.combB2(func.println, func.int))

func.printf(%n%n)

# B3
func.println(Examples B3)
func.println(===========)
func.println()

# B3-1: Output to int casted elements with index and length
func.println(Example B3-1: Output to int casted elements with index and length)
func.println(-----------------------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3)]
func.println(&values)

func.arrayEnumerate(&values, func.combB3(func.println, func.int, func.len(&values)))

func.printf(%n%n)

# BN
func.println(Examples BN)
func.println(===========)
func.println()

# BN-1: Output to int casted elements with and without index with one function pointer
func.println(Example BN-1: Output to int casted elements with and without index with one function pointer)
func.println(--------------------------------------------------------------------------------------------)
&values $= [42, 0, -1, 1, 5.21234, 5.91235f, func.long(3)]
func.println(&values)

fp.arrayFunc = func.combBN(func.println, func.int)

func.arrayForEach(&values, fp.arrayFunc)
func.arrayEnumerate(&values, fp.arrayFunc)

func.printf(%n%n)

# BV
func.println(Examples BV)
func.println(===========)
func.println()

# BV-1: Map every element to the sum of its to int casted elements [Auto-unpack]
func.println(Examples BV-1: Map every element to the sum of its to int casted elements [Auto-unpack])
func.println(---------------------------------------------------------------------------------------)
&values $= [func.arrayOf(42, 1, 3), func.arrayOf(0), func.arrayOf(-1, 2.5), func.arrayOf(1, 2), func.arrayOf(5.21234, 5.91235f), func.arrayOf(func.long(3), 3, -4.9)]

func.arrayMap(&values, func.combBV(func.addl, func.int))

func.println(&values)

func.printf(%n%n)

# Y
func.println(Examples  Y)
func.println(===========)
func.println()

# Y-1: Factorial function
func.println(Example  Y-1: Factorial function)
func.println(--------------------------------)
fp.fac = (fp.func) -> {
	fp.retFunc = (fp.func, $n) -> {
		return parser.op($n < 2?1:$n * fp.func(parser.op($n - 1)))
	}
	
	return func.combAN(fp.retFunc, fp.func)
}

# Apply the Y combinator
fp.facY = func.combY(fp.fac)

# Use function (All values from 0 to 20)
$i $= long(0)
until($i > 20) {
	func.println(fp.facY($i))
	
	$i += 1
}

func.println()

# Y-2: Fibonacci function
func.println(Example  Y-2: Fibonacci function)
func.println(--------------------------------)
fp.fib = (fp.func) -> {
	fp.retFunc = (fp.func, $x) -> {
		return parser.op($x < 2?1:fp.func(parser.op($x - 2)) + fp.func(parser.op($x - 1)))
	}
	
	return func.combAN(fp.retFunc, fp.func)
}

# Apply the Y combinator
fp.fibY = func.combY(fp.fib)

# Use function (All values from 0 to 20)
$i $= long(0)
until($i > 20) {
	func.println(fp.fibY($i))
	
	$i += 1
}

func.println()

# Y-3: Multiple arguments
func.println(Example  Y-3: Multiple arguments)
func.println(--------------------------------)
fp.facOut = (fp.func) -> {
	fp.retFunc = (fp.func, $n, $run) -> {
		func.printf({{{ > %2d (%2d)}}}, $run, $n)
		parser.op($run % 5 == 0 && $n > 1?func.println(\t):null)
		parser.op($n < 2?func.printf({{{%n=> }}}):null)
		return parser.op($n < 2?1:$n * fp.func(parser.op($n - 1), parser.op($run + 1)))
	}
	
	return func.combAN(fp.retFunc, fp.func)
}

# Apply the Y combinator
fp.facOutY = func.combY(fp.facOut)

# Use function (All values from 0 to 20)
$i $= long(0)
until($i > 20) {
	func.println(fp.facOutY($i, 1))
	
	$i += 1
}
