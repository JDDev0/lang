lang.name = Functions
lang.version = v1.0.0

# Functions:
# func.name() # Call function
# func.name(arg1, $arg2, &arg3, fp.arg4) # Call function with arguments

# Lang functions
# func.isLangVersionNewer(void) # Returns 1 if the lang version is newer than the lang file version else 0
$isLVN = func.isLangVersionNewer()
func.println($isLVN)

# func.isLangVersionOlder(void) # Returns 1 if the lang version is older than the lang file version else 0
$isLVO = func.isLangVersionOlder()
func.println($isLVO)

# System functions
# func.currentTimeMillis(void) # Returns the system date in ms since midnight 1.1.1970 UTC
func.println(Current time (Millis): func.currentTimeMillis())

$startTime = func.currentTimeMillis()

# func.sleep(millis) # Sleeps for millis ms
func.sleep(1000) # Will sleep 1 second

$endTime = func.currentTimeMillis()
func.println(Diff: func.subl($endTime, $startTime) ms)

# func.currentUnixTime(void) # Returns the system data in seconds since midnight 1.1.1970 UTC
func.println(Current time (Unix): func.currentUnixTime())

$startTime = func.currentUnixTime()
func.sleep(2000)
$endTime = func.currentUnixTime()
func.println(Diff: func.subl($endTime, $startTime) sec)

# func.nanoTime(void) # Returns the nano time since some arbitrary point (Should only be used to measure elapsed time)

$startTime = func.nanoTime()
func.sleep(1500)
$endTime = func.nanoTime()
func.println(Diff: func.subl($endTime, $startTime) ns (func.divl(func.subl($endTime, $startTime), 1000000) ms))

# IO functions
# func.readTerminal(Text) # Will read a user input, the user will see the text {Function is not supported by all interpreters: If not supported -> $LANG_ERRNO will be set}
$input = func.readTerminal(Enter something:)
func.println(Your input: $input)

# func.printTerminal(loglevel, Text) # Will print the text with the log level log level [-1 - 6]
func.printTerminal(-1, Test) # Not set/Unset
func.printTerminal(0, Test) # User
func.printTerminal(1, Test) # Debug
func.printTerminal(2, Test) # Config
func.printTerminal(3, Test) # Info
func.printTerminal(4, Test) # Warning
func.printTerminal(5, Test) # Error
func.printTerminal(6, Test) # Critical

# func.isTerminalAvailable() # Will return 1 if the terminal is available else 0
func.println(func.isTerminalAvailable())

# func.print(Text) # Will print the text to standard output
func.print(abc\n)

# func.println(Text) # Will print the text to standard output including new line
func.println(def)

# func.error(Text) # Will print the text to standard error
func.error(abc)

# func.errorln(Text) # Will print the text to standard error including new line
func.errorln(abc)

# func.input() # Reads everything until new line from standard input
func.println(Input: func.input())

# func.input(Int) # Reads n characters from standard input
func.println(Input: func.input(3))

# Number functions
# func.binToDec(Text) # Will convert a base 2 number to a base 10 integer
$num = func.binToDec(0b101100)
func.println($num)

# func.octToDec(Text) # Will convert a base 8 number to a base 10 integer
$num = func.octToDec(0o53)
func.println($num)

# func.hexToDec(Text) # Will convert a base 16 number to a base 10 integer
$num = func.hexToDec(0x2A)
func.println($num)

# func.toNumberBase(Text, int) # Will convert a base n number to a base 10 integer
$num = func.toNumberBase(XX, 36)
func.println($num)
$num = func.toNumberBase(xx, 36)
func.println($num)
$num = func.toNumberBase(1B, 14)
func.println($num)
$num = func.toNumberBase(30, 4)
func.println($num)

# func.toTextBase(int, int) # Will convert a base 10 integer to a base n number
$num = func.toTextBase(1221, 36)
func.println($num)
$num = func.toTextBase(25, 14)
func.println($num)
$num = func.toTextBase(12, 4)
func.println($num)

# func.toIntBits(float) # Will return the bits of the float as an integer value
func.println(func.toIntBits(42.42))

# func.toFloatBits(int) # Will return the bits of the integer as an float value
func.println(func.toFloatBits(42))

# func.toLongBits(double) # Will return the bits of the double as an long value
func.println(func.toLongBits(42.42))

# func.toDoubleBits(long) # Will return the bits of the long as an double value
func.println(func.toDoubleBits(42))

# func.ttoi(text) # Will parse the text as an int and returns the result
func.println(func.ttoi(text))
func.println(func.ttoi(-42))
func.println(func.ttoi(-0042))
func.println(func.ttoi(42))
func.println(func.ttoi(0042))

# func.ttol(text) # Will parse the text as a long and returns the result
func.println(func.ttol(text))
func.println(func.ttol(-42))
func.println(func.ttol(-0042))
func.println(func.ttol(42))
func.println(func.ttol(0042))

# func.ttof(text) # Will parse the text as a float and returns the result
func.println(func.ttof(text))
func.println(func.ttof(-.42))
func.println(func.ttof(-42.0))
func.println(func.ttof(42.))
func.println(func.ttof(0.42))

# func.ttod(text) # Will parse the text as a double and returns the result
func.println(func.ttod(text))
func.println(func.ttod(-.42))
func.println(func.ttod(-42.0))
func.println(func.ttod(42.))
func.println(func.ttod(0.42))

func.println()

# func.isNaN(number) # Will return true if the provided number is floating point NaN. Will always return false for non floating point numbers
func.println(func.isNaN($LANG_FLOAT_NAN))
func.println(func.isNaN($LANG_DOUBLE_NAN))
func.println(func.isNaN(func.div(0, 0)))
func.println(func.isNaN(4.2))
func.println(func.isNaN(2))
func.println(func.isNaN(.2))

func.println()

# Character functions
# func.toValue(char) # Will return the Unicode value of a char
$valA = func.toValue(a)
func.println($valA)

$valEur = func.toValue(€)
func.println($valEur)

# func.toChar(int) # Will return the Unicode char with the value of the parameter
$char1 = func.toChar(42)
func.println($char1)

$char2 = func.toChar(8364)
func.println($char2)

# func.ttoc(text) # Will return the first character of the text if the text has a length of 1
func.println(func.ttoc(text))
func.println(func.ttoc(t\e))
func.println(func.ttoc(µ\e))
func.println(func.ttoc($\e))
func.println(func.ttoc(¤\e))

func.println(\n)

# Text functions
# func.strlen(Text) # Will return the lenght (Count of chars, NOT Byte count) of the text as int
$len = func.strlen(How long I'm? [€¤$])
func.println(How long I'm? [€¤$]: $len)

# func.toUpper(Text) # Will return the upper case version of a string
$upper = func.toUpper(I'm not in caps - I think...)
func.println($upper)

# func.toLower(Text) # Will return the lower case version of a string
$lower = func.toLower(I'm not in caps - I think...)
func.println($lower)

# func.trim(Text) # Will remove leading and trailing wihtespaces of the string
$trimed = func.trim(     Text with many withspaces!         )
func.println($trimed)

# func.replace(Text, Text, Text) # Will replace the in the first parameter matched (second parameter {RegEx}) sequences with the replacement (thrid paramter)
$noWhiteSpaces = func.replace(          A    text		  with many 	withspaces!    \s, \\s, -)
func.println($noWhiteSpaces)

# func.substring(Text, int, [int]) # Will return the Text from the index (2nd parameter) to the index (3rd parameter) or to the end if no 3rd parameter is provided
$sub1 = func.substring(Not yours!, 4)
func.println($sub1)

$sub2 = func.substring(This is a long text!, 15, 19)
func.println($sub2)

# func.charAt(Text, int) # Will return the char at the index (2nd parameter). Negative indices are allowed (-1 is the last character, -2 is the character previous to the last character, ...)
func.println(func.charAt(abc\, test string, 0))
func.println(func.charAt(abc\, test string, 3))
func.println(func.charAt(abc\, test string, 5))
func.println(func.charAt(abc\, test string, 42))

func.println(func.charAt(def\, text, 0))
func.println(func.charAt(def\, text, 3))
func.println(func.charAt(def\, text, 5))
func.println(func.charAt(def\, text, 42))

func.println(func.charAt({{{xyz, nice!}}}, 0))
func.println(func.charAt({{{xyz, nice!}}}, 3))
func.println(func.charAt({{{xyz, nice!}}}, 5))
func.println(func.charAt({{{xyz, nice!}}}, 42))

func.println(func.charAt(10042000, 0))
func.println(func.charAt(10042000, 3))
func.println(func.charAt(10042000, 5))
func.println(func.charAt(10042000, 42))

func.println(func.charAt(100.42000, 0))
func.println(func.charAt(100.42000, 3))
func.println(func.charAt(100.42000, 5))
func.println(func.charAt(100.42000, 42))

func.println()

func.println(func.charAt(abc\, test string, -1))
func.println(func.charAt(abc\, test string, -4))
func.println(func.charAt(abc\, test string, -6))
func.println(func.charAt(abc\, test string, -43))

func.println(func.charAt(def\, text, -1))
func.println(func.charAt(def\, text, -4))
func.println(func.charAt(def\, text, -6))
func.println(func.charAt(def\, text, -43))

func.println(func.charAt({{{xyz, nice!}}}, -1))
func.println(func.charAt({{{xyz, nice!}}}, -4))
func.println(func.charAt({{{xyz, nice!}}}, -6))
func.println(func.charAt({{{xyz, nice!}}}, -43))

func.println(func.charAt(10042000, -1))
func.println(func.charAt(10042000, -4))
func.println(func.charAt(10042000, -6))
func.println(func.charAt(10042000, -43))

func.println(func.charAt(100.42000, -1))
func.println(func.charAt(100.42000, -4))
func.println(func.charAt(100.42000, -6))
func.println(func.charAt(100.42000, -43))

func.println()

# func.lpad(Text, Padding text, length) # Will add a padding on the left side of the text (The result will be of length length or the size of Text if it was already greater than the provided length) (Only parts of the padding text can be used if the padding would be greater than the length)
func.println(func.lpad(A text, \s, 10))
func.println(func.lpad(A text, *, 10))
func.println(func.lpad(A text, -., 10))
func.println(func.lpad(A text, -., 11))
func.println(func.lpad(A very long text, *, 11))
func.println(func.lpad(A text, TEST-, 15))
# The padding text must not be empty
func.println(func.lpad(A text, \e, 10))
# Padding text may also not be empty if no padding is needed
func.println(func.lpad(A text, \e, 5))

func.println()

# func.rpad(Text, Padding text, length) # Will add a padding on the right side of the text (Everything else has the same behavior as func.lpad)
func.println(func.rpad(A text, \s, 10))
func.println(func.rpad(A text, *, 10))
func.println(func.rpad(A text, -., 10))
func.println(func.rpad(A text, -., 11))
func.println(func.rpad(A very long text, *, 11))
func.println(func.rpad(A text, TEST-, 15))
# The padding text must not be empty
func.println(func.rpad(A text, \e, 10))
# Padding text may also not be empty if no padding is needed
func.println(func.rpad(A text, \e, 5))

func.println()

# func.contains(TEXT, TEXT) # Returns 1 if the 2nd argument is contained in the 1st argument
func.println(func.contains(testtext, test))
func.println(func.contains(testtext, text))
func.println(func.contains(testtext, t))
func.println(func.contains(testtext, \e))
func.println(func.contains(\e, \e))

func.println()

func.println(func.contains(testtext, txt))
func.println(func.contains(testtext, texttest))
func.println(func.contains(\e, test))

func.println()

# func.startsWith(TEXT, TEXT) # Returns 1 if the 1st argument starts with the 2nd argument
func.println(func.startsWith(abc, a))
func.println(func.startsWith(abc, ab))
func.println(func.startsWith(abc, abc))
func.println(func.startsWith(abc, \e))
func.println(func.startsWith(\e, \e))

func.println()

func.println(func.startsWith(a, abc))
func.println(func.startsWith(ab, abc))
func.println(func.startsWith(abc, cba))
func.println(func.startsWith(\e, abc))

func.println()

# func.endsWith(TEXT, TEXT) # Returns 1 if the 1st argument ends with the 2nd argument
func.println(func.endsWith(abc, c))
func.println(func.endsWith(abc, bc))
func.println(func.endsWith(abc, abc))
func.println(func.endsWith(abc, \e))
func.println(func.endsWith(\e, \e))

func.println()

func.println(func.endsWith(a, abc))
func.println(func.endsWith(ab, abc))
func.println(func.endsWith(abc, cba))
func.println(func.endsWith(\e, abc))

func.println()

# func.repeatText(INT, VARARGS) # Repeats the VARARGS TEXT n times (if n = 0, \e will be returned)
func.println(func.repeatText(2, abc))
func.println(func.repeatText(3, abc-))
func.println(func.repeatText(4, abc-))
func.println(func.repeatText(5, abc))
func.println(func.repeatText(1, abc))
func.println(func.repeatText(0, abc))
func.println(func.repeatText(2, \e))
func.println(func.repeatText(4, \e))
func.println(func.repeatText(5, 2))
func.println(func.repeatText(5, 2,test))

func.println(\n)

# Math functions
# func.rand() # Will return a int value between 0 and $LANG_RAND_MAX
func.println(func.rand())

# func.inc[i/l/f/d](int/long/float/double) # Will add 1
$inci = func.inci(49)
$incl = func.incl(-10)
$incf = func.incf(.2)
$incd = func.incd(-.78)
func.println(|$inci|$incl|$incf|$incd|)

# func.dec[i/l/f/d](int/long/float/double) # Will substract 1
$deci = func.deci(49)
$decl = func.decl(-10)
$decf = func.decf(.2)
$decd = func.decd(-.78)
func.println(|$deci|$decl|$decf|$decd|)

# func.inv[i/l/f/d](int/long/float/double) # Will return 0 - value
$invi = func.invi(49)
$invl = func.invl(-10)
$invf = func.invf(.2)
$invd = func.invd(-.78)
func.println(|$invi|$invl|$invf|$invd|)

# func.add[i/l/f/d]((int/long/float/double)) # Will add 0 or more values toghter
$addi = func.addi(49, 200, 2003)
$addl = func.addl(-10)
$addf = func.addf(-10, .2)
$addd = func.addd(.4, .5, .6)
func.println(|$addi|$addl|$addf|$addd|)

# func.sub[i/l/f/d](int/long/float/double, int/long/float/double) # Will substract the second argument form the first argument
$subi = func.subi(42, 38)
$subl = func.subl(10, -69)
$subf = func.subf(1.42, 1)
$subd = func.subd(1, 1.42)
func.println(|$subi|$subl|$subf|$subd|)

# func.mul[i/l/f/d]((int/long/float/double)) # Will multiply 0 or more values toghter
$mul = func.mull(10, 42)
func.println(|$mul|)

# func.div[i/l/f/d](int/long/float/double, int/long/float/double) # Will divide the second argument form the first argument
$divi = func.divi(20, 12)
$divd = func.divd(20, 12)
$divNull = func.divi(1, 0)
func.println(|$divi|$divd|$divNull|)

# func.mod[i/l](int/long, int/long) # Will return the modulus of the second and the first argument
$mod = func.modi(20, 12)
$modNull = func.modi(1, 0)
func.println(|$mod|$modNull|)

# func.pow(double, double) # Will return the power of the first and the second argument
$pow1 = func.pow(2, 10)
$pow2 = func.pow(10, 2)
$pow3 = func.pow(10, -2)
$pow4 = func.pow(10, 0)
$pow5 = func.pow(0, 0)
$pow6 = func.pow(16, .5)
func.println(|$pow1|$pow2|$pow3|$pow4|$pow5|$pow6|)

# func.sqrt(double) # Will return the square root of the argument
func.println(func.sqrt(16))

# func.cbrt(double) # Will return the cube root of the argument
func.println(func.cbrt(64))

# func.hypot(double, double) # Will return the hypotenuse of a triangle with sides a and b (= sqrt(a² + b²))
func.println(func.hypot(3, 4))

# func.toRadians(double) # Will return the to radians converted angle which was in degrees
func.println(func.toRadians(90))

# func.toDegrees(double) # Will return the to degrees converted angle which was in radians
func.println(func.toDegrees(func.divd($LANG_MATH_PI, 2)))

# func.sin(double) # Will return the sine of the argument which is in radians
func.println(func.sin($LANG_MATH_PI))

# func.cos(double) # Will return the cosine of the argument which is in radians
func.println(func.cos($LANG_MATH_PI))

# func.tan(double) # Will return the tangent of the argument which is in radians
func.println(func.tan(func.divd($LANG_MATH_PI, 2)))

# func.asin(double) # Will return the arcsine in radians of the argument
func.println(func.asin(1))

# func.acos(double) # Will return the arccosine in radians of the argument
func.println(func.acos(1))

# func.atan(double) # Will return the arctangent in radians of the argument
func.println(func.atan(1))

# func.atan2(double, double) # Will return the arctangent in radians of the second argument divided by the first argument
func.println(func.atan2(2, 2))

# func.sinh(double) # Will return the hyperbolic sine of the argument which is in radians
func.println(func.sinh($LANG_MATH_PI))

# func.cosh(double) # Will return the hyperbolic cosine of the argument which is in radians
func.println(func.cosh($LANG_MATH_PI))

# func.tanh(double) # Will return the hyperbolic tangent of the argument which is in radians
func.println(func.tanh(func.divd($LANG_MATH_PI, 2)))

# func.exp(double) # Will return e to the power of the argument
func.println(func.exp(1))

# func.loge(double) # Will return the logarithm base e of the argument
func.println(func.loge($LANG_MATH_E))

# func.log10(double) # Will return the logarithm base 10 of the argument
func.println(func.log10(1000))

# func.toInt(number) # Will return an int
$var1 = func.toInt(10.2)
$var2 = func.toInt(10.8)
$var3 = func.toInt(10)
$var4 = func.toInt(-10)
func.println(|$var1|$var2|$var3|$var4|)

# func.toLong(number) # Will return a long
$var1 = func.toLong(10.2)
$var2 = func.toLong(10.8)
$var3 = func.toLong(10)
$var4 = func.toLong(-10)
func.println(|$var1|$var2|$var3|$var4|)

# func.toFloat(number) # Will return a float
$var1 = func.toFloat(10.2)
$var2 = func.toFloat(10.8)
$var3 = func.toFloat(10)
$var4 = func.toFloat(-10)
func.println(|$var1|$var2|$var3|$var4|)

# func.toDouble(number) # Will return a double
$var1 = func.toDouble(10.2)
$var2 = func.toDouble(10.8)
$var3 = func.toDouble(10)
$var4 = func.toDouble(-10)
func.println(|$var1|$var2|$var3|$var4|)

# func.round(double) # Will return the rounded value of the argument
$var1 = func.round(10.2)
$var2 = func.round(10.5)
$var3 = func.round(10.8)
$var4 = func.round(-10.2)
$var5 = func.round(-10.5)
$var6 = func.round(-10.8)
func.println(|$var1|$var2|$var3|$var4|$var5|$var6|)

# func.ceil(double) # Will return the ceil of the argument
$var1 = func.ceil(10.2)
$var2 = func.ceil(10.5)
$var3 = func.ceil(10.8)
$var4 = func.ceil(-10.2)
$var5 = func.ceil(-10.5)
$var6 = func.ceil(-10.8)
func.println(|$var1|$var2|$var3|$var4|$var5|$var6|)

# func.floor(double) # Will return the floor of the argument
$var1 = func.floor(10.2)
$var2 = func.floor(10.5)
$var3 = func.floor(10.8)
$var4 = func.floor(-10.2)
$var5 = func.floor(-10.5)
$var6 = func.floor(-10.8)
func.println(|$var1|$var2|$var3|$var4|$var5|$var6|)

# Get a random text from a parameter list
# func.randChoice(Text, (Text)) # Will return a random element
$rand1 = func.randChoice(1,42,Your Choice,42-The 2nd!)
$rand2 = func.randChoice(1,42,Your Choice,42-The 2nd!)
$rand3 = func.randChoice(1)
$rand4 = func.randChoice()
func.println(|$rand1|$rand2|$rand3|$rand4|)

# Execute dynamically generated code
$var = func
func.exec($var.println(test inside exec))

# Code executed by func.exec has access to outside variables and the code can override them with func.copyAfterFP: See [07_loops.lang: func.copyAfterFP]
func.exec(func.println($var)\nfunc.println(\$var)) # Would print "func" and than "$var"

# Use multiline text for escaping variables
func.exec({{{func.println($var)}}}) # Will print "func"

# Returning values with exec
$value = 42\.123
$a = func.exec(ret\!urn $value) # return: See [05_functionPointer.lang: return]
$b = func.exec({{{return $value}}})
func.println($value [func.typeOf($value)], $a [func.typeOf($a)], $b [func.typeOf($b)])
# Data types: "$value": TEXT, "$a": FLOAT, "$b": TEXT

# Accessing variables inside exec
$val = 42
func.exec({{{func.println($val)}}}) # Will print 42
func.exec({{{$val = test
func.println($val)}}}) # Will print test, but $val is only set locally
func.println($val) # Will print 42
