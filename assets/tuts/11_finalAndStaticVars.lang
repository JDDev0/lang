lang.name = Final and static Vars
lang.version = v1.0.0

# Make variable final
# func.makeFinal(varPtr)
# func.makeFinal(funcPtr)
# func.makeFinal(arrPtr) # Will make the variable final
#                        (= not overrideable)
#                        The content of a final arrPtr
#                        can be changed
# -> If a variable is final, it can not be overriden by another value.

# Final var
$a = DO NOT modify!
func.makeFinal($[a])

$a = I have modified you! # Will result in an error
func.printTerminal(2, $a)
func.printError()

$a # Will also result in an error
func.printTerminal(2, $a)
func.printError()

$b = $a # No Error
$b = TEST # Also no error ($b is not final)
func.printTerminal(2, $a: $b)
func.printError()

# Check if a variable is final
# func.isFinal(any) # Returns 1 if the provided variable is final
func.println(func.isFinal($a)) # 1
func.println(func.isFinal($b)) # 0

fp.test = () -> {
	# No error, because $a is an local variable of the function
	$a = 100
	func.printTerminal(2, $a)
	func.printError()
	
	# Will also result in an error
	func.copyAfterFP($[a], $[a])
}
fp.test()
func.printTerminal(2, $a)
func.printError()

# Final arrPtrs
&a = func.arrayOf(10, 42)
func.makeFinal(&a)
func.printTerminal(3, func.arrayGetAll(&a))

func.arraySetAll(&a, 42, 40) # No Error
func.printTerminal(3, func.arrayGetAll(&a))
func.printError()

func.arrayMake(&a, 3) # Will result in an error
func.printError()
func.printTerminal(3, func.arrayGetAll(&a))

func.arrayDelete(&a) # No Error
func.printError()
func.printTerminal(3, func.arrayGetAll(&a))

# Final funcPtrs
fp.test = () -> {
	func.printTerminal(2, TESTED!)
}
func.makeFinal(fp.test)
fp.test() # Will produce no error
func.printError()

fp.test = () -> { # Will result in an error
	func.printTerminal(5, Modifyed!)
}
fp.test()
func.printError()

# func.clearVar can only remove non final vars
func.clearVar(fp.test) # Will result in an error
fp.test()
func.printError()

# Clear var
# func.clearVar(varPtr)
# func.clearVar(arrPtr)
# func.clearVar(funcPtr) # Will remove a variable in the current scope
$var = Test
func.printTerminal(-1, $var)
func.clearVar($[var])
func.printTerminal(-1, $var)

func.clearVar($[a]) # Will result in an error
                    # [Final vars can't be removed]
func.printTerminal(2, $a)
func.printError()

func.clearVar(fp.test) # Will also result in an error
fp.test()
func.printError()

func.clearVar(&a) # Will also result in an error
func.printTerminal(3, func.arrayGetAll(&a))
func.printError()

# Clear all vars
# func.clearAllVars() # Will remove ALL vars in the current scope
#                       (inculding final vars)
#                       -> Only way to remove final vars
func.clearAllVars()

$a # Will produce no error
func.printTerminal(2, $a)
func.printError()

$a = New variable # Will also produce no error
func.printTerminal(2, $a)
func.printError()

# Make variable static
# func.makeStatic(varPtr)
# func.makeStatic(funcPtr)
# func.makeStatic(arrPtr)
# -> If a variable is static, it will can be overriden in function and "func.exec" scopes. Static vars are not accessible in linked lang files.

# Static var
$a = Static
$b = Not static
func.makeStatic($[a])

func.println(\$a: $a) # Static
func.println(\$b: $b) # Not static

$a = 42
func.println(\$a: $a) # 42
$b = 43
func.println(\$b: $b) # 43

fp.function = () -> {
	func.println(\$a [In function]: $a) # 42
	func.println(\$b [In function]: $b) # 43
	
	$a = 40
	func.println(\$a [In function]: $a) # 40
	$b = 41
	func.println(\$b [In function]: $b) # 41
}
fp.function()

func.println(\$a: $a) # 40
func.println(\$b: $b) # 43

func.println()

# Static arrays
&a = func.arrayOf(1, 3, abc)
&b = func.arrayOf(0, 42, test)
func.makeStatic(&a)

func.println(\&a: &a) # [1, 3, abc]
func.println(\&b: &b) # [0, 42, test]

&a = func.arrayOf(1, 2)
func.println(\&a: &a) # [1, 2]
&b = func.arrayOf(2, 3)
func.println(\&b: &b) # [2, 3]

func.arraySet(&a, 1, test)
func.println(\&a: &a) # [1, test]
func.arraySet(&b, 1, test2)
func.println(\&b: &b) # [2, test2]

fp.function = () -> {
	func.println(\&a [In function]: &a) # [1, test]
	func.println(\&b [In function]: &b) # [2, test2]
	
	func.arraySet(&a, 1, 42)
	func.println(\&a [In function]: &a) # [1, 42]
	func.arraySet(&b, 1, 422)
	func.println(\&b [In function]: &b) # [2, 422]
	
	&a = func.arrayOf(1, 2, 3)
	func.println(\&a [In function]: &a) # [1, 2, 3]
	&b = func.arrayOf(4, 5, 6)
	func.println(\&b [In function]: &b) # [4, 5, 6]
}
fp.function()

func.println(\&a: &a) # [1, 2, 3]
func.println(\&b: &b) # [2, 422]

func.println()

# Static vars and var clearing
$a = Static
$b = Not static
$c = Static 2
func.makeStatic($[a])
func.makeStatic($[c])

func.println(\$a: $a) # Static
func.println(\$b: $b) # Not static
func.println(\$c: $c) # Static 2

fp.function = () -> {
	func.println(\$a [In function]: $a) # Static
	func.println(\$b [In function]: $b) # Not static
	func.println(\$c [In function]: $c) # Static 2
	
	func.clearVar($[a])
	func.println(\$a [In function]: $a) # $a
	func.clearVar($[b])
	func.println(\$b [In function]: $b) # $b
	func.clearVar($[c])
	func.println(\$c [In function]: $c) # $c
	
	$c = test # $c is now a new variable (It is not the static outer scope variable)
	func.println(\$c [In function]: $c) # test
}
fp.function()

func.println(\$a: $a) # Static
func.println(\$b: $b) # Not static
func.println(\$b: $c) # Static 2

func.println()

# Static var shadowing
$a = Static
func.makeStatic($[a])

func.println(\$a: $a) # Static

fp.function = ($a) -> {
	# "$a" will shadow the static "$a" variable
	
	func.println(\$a [In function]: $a) # test
	
	$a = 42
	func.println(\$a [In function]: $a) # 42
}
fp.function(test)

func.println(\$a: $a) # Static

func.println()

# Static final vars
# Variables can be static and final at the same time
$a = Final Static
func.makeFinal($a)
func.makeStatic($a)

$b = Static Final
func.makeStatic($b)
func.makeFinal($b)

# Both "$a" and "$b" are both static and final, the order of the "makeStatic" call and the "makeFinal" call is not important

func.println(\$a: $a) # Final Static
func.println(\$b: $b) # Static Final

fp.function = () -> {
	func.println(\$a: $a) # Final Static
	func.println(\$b: $b) # Static Final

	$a = 42 # Will throw an error: Final var change
	$b = 43 # Will throw an error too: Final var change
	
	func.println(\$a: $a) # Final Static
	func.println(\$b: $b) # Static Final
}
fp.function()

func.println(\$a: $a) # Final Static
func.println(\$b: $b) # Static Final

func.println()

# Static vars in multiple scope
$outerStatic = Outer static
func.makeStatic($outerStatic)

func.println(\$outerStatic: $outerStatic) # Outer static

$x = X # Will not be static in outer scope
func.println(\$x: $x) # X

fp.inner = () -> {
	$innerStatic = Inner static
	func.makeStatic($innerStatic)
	
	func.println(\$innerStatic: $innerStatic) # Inner static
	
	func.println(\$x: $x) # X
	func.makeStatic($x) # Make $x static in inner scope
	func.println(\$x: $x) # X
	
	fp.function = () -> {
		func.println(\$innerStatic: $innerStatic) # Inner static
		func.println(\$outerStatic: $outerStatic) # Outer static
		func.println(\$x: $x) # X
		
		$innerStatic = 42
		func.println(\$innerStatic: $innerStatic) # 42
		
		$outerStatic = 40
		func.println(\$outerStatic: $outerStatic) # 40
		
		$x = 42
		func.println(\$x: $x) # 42
	}
	fp.function()
	
	func.println(\$innerStatic: $innerStatic) # 42
	func.println(\$x: $x) # 42
}
fp.inner()

func.println(\$innerStatic: $innerStatic) # $innerStatic
func.println(\$outerStatic: $outerStatic) # 40
func.println(\$x: $x) # X

func.println()

$y = Static
func.makeStatic($[y])

func.println(\$y: $y) # Static

fp.y = () -> {
	func.println(fp\.y: \$y: $y)
	# 1st time: Static
	# 2nd time: 42
	
	$y = abc
	func.println(fp\.y: \$y: $y) # abc
}
fp.y()

func.println(\$y: $y) # abc

$y = Static

func.println(\$y: $y) # Static

fp.y2 = ($y) -> {
	func.println(fp\.y2.\$y: $y) # test
	
	$y = 42
	func.println(fp\.y2.\$y: $y) # 42
	
	fp.y()
	func.println(fp\.y2.\$y: $y) # 42
}
fp.y2(test)
func.println(\$y: $y) # Static
