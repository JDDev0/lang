lang.name = Final and static Vars
lang.version = v1.0.0

# Make variable final
# func.makeFinal(varPtr)
# func.makeFinal(funcPtr)
# func.makeFinal(arrPtr) # Will make the variable final
#                        (= not overrideable)
#                        The content of a final arrPtr
#                        can be changed
# -> If a variable is final, it can not be overriden by another value.

# Final var
$a = DO NOT modify!
func.makeFinal($[a])

$a = I have modified you! # Will result in an error
func.printTerminal(2, $a)
func.printError()

$a # Will also result in an error
func.printTerminal(2, $a)
func.printError()

$b = $a # No Error
$b = TEST # Also no error ($b is not final)
func.printTerminal(2, $a: $b)
func.printError()

# Check if a variable is final
# func.isFinal(any) # Returns 1 if the provided variable is final
func.println(func.isFinal($a)) # 1
func.println(func.isFinal($b)) # 0

fp.test = () -> {
	# No error, because $a is an local variable of the function
	$a = 100
	func.printTerminal(2, $a)
	func.printError()
	
	# Will also result in an error
	func.copyAfterFP($[a], $[a])
}
fp.test()
func.printTerminal(2, $a)
func.printError()

# Final arrPtrs
&a = func.arrayOf(10, 42)
func.makeFinal(&a)
func.printTerminal(3, func.arrayGetAll(&a))

func.arraySetAll(&a, 42, 40) # No Error
func.printTerminal(3, func.arrayGetAll(&a))
func.printError()

func.arrayMake(&a, 3) # Will result in an error
func.printError()
func.printTerminal(3, func.arrayGetAll(&a))

func.arrayDelete(&a) # No Error
func.printError()
func.printTerminal(3, func.arrayGetAll(&a))

# Final funcPtrs
fp.test = () -> {
	func.printTerminal(2, TESTED!)
}
func.makeFinal(fp.test)
fp.test() # Will produce no error
func.printError()

fp.test = () -> { # Will result in an error
	func.printTerminal(5, Modifyed!)
}
fp.test()
func.printError()

# func.clearVar can only remove non final vars
func.clearVar(fp.test) # Will result in an error
fp.test()
func.printError()

# Clear var
# func.clearVar(varPtr)
# func.clearVar(arrPtr)
# func.clearVar(funcPtr) # Will remove a variable in the current scope
$var = Test
func.printTerminal(-1, $var)
func.clearVar($[var])
func.printTerminal(-1, $var)

func.clearVar($[a]) # Will result in an error
                    # [Final vars can't be removed]
func.printTerminal(2, $a)
func.printError()

func.clearVar(fp.test) # Will also result in an error
fp.test()
func.printError()

func.clearVar(&a) # Will also result in an error
func.printTerminal(3, func.arrayGetAll(&a))
func.printError()

# Clear all vars
# func.clearAllVars() # Will remove ALL vars in the current scope
#                       (inculding final vars)
#                       -> Only way to remove final vars
func.clearAllVars()

$a # Will produce no error
func.printTerminal(2, $a)
func.printError()

$a = New variable # Will also produce no error
func.printTerminal(2, $a)
func.printError()

# Make variable static
# func.makeStatic(varPtr)
# func.makeStatic(funcPtr)
# func.makeStatic(arrPtr)
# -> If a variable is static, it will can be overriden in function and "func.exec" scopes.

# Static var
$a = Static
$b = Not static
func.makeStatic($[a])

func.println(\$a: $a) # Static
func.println(\$b: $b) # Not static

$a = 42
func.println(\$a: $a) # 42
$b = 43
func.println(\$b: $b) # 43

fp.function = () -> {
	func.println(\$a [In function]: $a) # 42
	func.println(\$b [In function]: $b) # 43
	
	$a = 40
	func.println(\$a [In function]: $a) # 40
	$b = 41
	func.println(\$b [In function]: $b) # 41
}
fp.function()

func.println(\$a: $a) # 40
func.println(\$b: $b) # 43

func.println()

# Static arrays
&a = func.arrayOf(1, 3, abc)
&b = func.arrayOf(0, 42, test)
func.makeStatic(&a)

func.println(\&a: &a) # [1, 3, abc]
func.println(\&b: &b) # [0, 42, test]

&a = func.arrayOf(1, 2)
func.println(\&a: &a) # [1, 2]
&b = func.arrayOf(2, 3)
func.println(\&b: &b) # [2, 3]

func.arraySet(&a, 1, test)
func.println(\&a: &a) # [1, test]
func.arraySet(&b, 1, test2)
func.println(\&b: &b) # [2, test2]

fp.function = () -> {
	func.println(\&a [In function]: &a) # [1, test]
	func.println(\&b [In function]: &b) # [2, test2]
	
	func.arraySet(&a, 1, 42)
	func.println(\&a [In function]: &a) # [1, 42]
	func.arraySet(&b, 1, 422)
	func.println(\&b [In function]: &b) # [2, 422]
	
	&a = func.arrayOf(1, 2, 3)
	func.println(\&a [In function]: &a) # [1, 2, 3]
	&b = func.arrayOf(4, 5, 6)
	func.println(\&b [In function]: &b) # [4, 5, 6]
}
fp.function()

func.println(\&a: &a) # [1, 2, 3]
func.println(\&b: &b) # [2, 422]

func.println()

# Static vars and var clearing
$a = Static
$b = Not static
func.makeStatic($[a])

func.println(\$a: $a) # Static
func.println(\$b: $b) # Not static

fp.function = () -> {
	func.println(\$a [In function]: $a) # Static
	func.println(\$b [In function]: $b) # Not static
	
	func.clearVar($[a])
	func.println(\$a [In function]: $a) # $a
	func.clearVar($[b])
	func.println(\$b [In function]: $b) # $b
}
fp.function()

func.println(\$a: $a) # Static
func.println(\$b: $b) # Not static
