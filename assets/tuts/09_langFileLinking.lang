lang.name = Lang File Linking
lang.version = v0.2.0

# FILE type
# Examples:
#     /home/name/path [Linux]
#     C://Users/name/path [Windows]
#     relative/path {The path is relative to the location of
#                    the executed lang file}
# Use '/' as file seperator

# Get path to the executed lang file (Will be used for relative
#                                     paths)
func.printTerminal(-1, $LANG_PATH)

# Link Lang file
# linker.link(FILE) # Will execute the lang file FILE
#                     and will copy all translations from
#                     the lang file to the local translations
#                     ("lang." translations won't be copied)
linker.link(09_linkTestTranslations.lang)

fp.glr = func.getLangRequest # Copy func.getLangRequest for better
                             # code

func.printTerminal(-1, fp.glr(test.name), fp.glr(test.age), fp.glr(test.data))
func.printTerminal(-1, $var) # Will print "$var", because $var is no translation
fp.printTest(42) # Will result in an error
func.printError()

# Bind Library
# linker.bindLibrary(FILE) # Will execute the lang file FILE
#                            and will copy everything execept
#                            translations (Final attribute will
#                            be copied too) (If local final variable
#                            name is in the lang file FILE, it won't
#                            be copied) ("$LANG" vars won't be copied)
linker.bindLibrary(09_linkTestLibrary.lang)
func.printTerminal(-1, fp.glr(lib.name)) # Will print "ERROR":
                                         # lib.name will not
                                         # be copied
func.printTerminal(-1, $lib.var)
fp.libTest(--- Test_42 ---)

# Link lang file and bind library
linker.link(09_linkTestAll.lang)
linker.bindLibrary(09_linkTestAll.lang)

func.printTerminal(-1, fp.glr(lib2.name), fp.glr(lib2.data))
func.printTerminal(-1, $lib2.var)
fp.lib2Test(--- TEST ---)
