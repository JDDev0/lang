lang.name = Arrays
lang.version = v1.0.0

# Creation of an array
# func.arrayMake(arrPtr, int)
func.arrayMake(&arr, 10) # Will create the array &arr with the lenght of 10
# func.arrayMake(int)
&b = func.arrayMake(10) # Will also create an array of length 10
func.arrayMake(&c, 0) # Will create an empty array
&d = func.arrayMake(0) # Will also create an empty array

# Creation of an array with setting values in one line
&e = func.arrayOf() # Will create an empty array
&f = func.arrayOf(1, 2, test)
&g = func.arrayOf({{{1}}}, func.ttoc(1), 1, func.toLong(1))
&h = func.arrayOf(null, &e, 1, 2, , test)
&i = func.arrayOf(func.arrayOf(1, 2, 3), func.arrayOf(a, b, c), func.arrayOf(A, B, C)) # Will create an array with anonymous array elements

# Get the lenght of an array
# func.arrayLength(arrPtr)
$len = func.arrayLength(&arr) # Will return the length of the array &arr
func.println($len)

# Get all elements of an array
# func.arrayGetAll(arrPtr)
$arr = func.arrayGetAll(&arr) # Will return the content of the whole array with ", " as element separator
func.println($arr)
func.println(&arr) # Will return the content of the whole array inside "[]" with ", " as element separator
func.println(func.arrayGetAll(func.arrayOf(1, 2, A, B, null))) # Will print the values of an anonymous array

# Set an element of an array
# func.arraySet(arrPtr, int, Text)
func.arraySet(&arr, 7, THIS IS A CAPS TEST!) # Will set the element at the index 7 of the array &arr to "THIS IS A CAPS TEST!"
func.println(func.arrayGetAll(&arr))

# Set all elements of an array
# func.arraySetAll(arrPtr, Text)
func.arraySetAll(&arr, value) # Will set all elements of the array &arr to "value"
func.println(func.arrayGetAll(&arr))

# func.arraySetAll(arrPtr, Text[len]) //len = length of arrPtr
func.arraySetAll(&arr, value1, 2, 3, test, 6, 5, 10, 42, test, 10th Element) # Will set all elements of the array &arr
func.println(func.arrayGetAll(&arr))

# Get an element of an array
# func.arrayGet(arrPtr, int)
$ele = func.arrayGet(&arr, 7) # Will return the element at the index 7 from the array &arr
func.println($ele)

# Get a random element of an array
# func.randChoice(arrPtr)
$ele = func.randChoice(&arr) # Will return a random element of the array &arr
func.println($ele)

func.println()

# Fill an array from an index
# func.arrayFillFrom(&arr, $startIndex, $value) # $startIndex [inclusive] - len(&arr) [exclusive]
&arrFill = func.arrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9)
func.println(&arrFill)
func.arrayFillFrom(&arrFill, 7, 42)
func.println(&arrFill)
func.arrayFillFrom(&arrFill, 2, 20)
func.println(&arrFill)
func.arrayFillFrom(&arrFill, 0, 12)
func.println(&arrFill)

func.println()

# Fill an array to an index
# func.arrayFillTo(&arr, $endIndex, $value) # 0 [inclusive] - $endIndex [inclusive]
&arrFill = func.arrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9)
func.println(&arrFill)
func.arrayFillTo(&arrFill, 3, 42)
func.println(&arrFill)
func.arrayFillTo(&arrFill, 6, 20)
func.println(&arrFill)
func.arrayFillTo(&arrFill, 8, 12)
func.println(&arrFill)

func.println()

# Get count of an element in an array
# func.arrayCountOf(arrPtr, ele) # Will return the count of the element (strict equals)
$count = func.arrayCountOf(&arr, value1) # Will return 1
func.println($count)
$count = func.arrayCountOf(&arr, 5) # Will return 1
func.println($count)
$count = func.arrayCountOf(&arr, {{{5}}}) # Will return 0 (Uses strict equals internally See [06_if.lang: strict equals])
func.println($count)

func.arraySet(&arr, 2, 2)
$count = func.arrayCountOf(&arr, 2) # Will return 2
func.println($count)

func.println()

&arr = func.arrayOf(1, 2, {{{1}}}, 1., test, t, {{{t}}}, abc, 42, abc, null)

# func.arrayCountLike(arrPtr, ele) # Will return the count of the element (normal equals)
func.println(func.arrayCountLike(&arr, 1)) # 3
func.println(func.arrayCountLike(&arr, 1.)) # 3
func.println(func.arrayCountLike(&arr, t)) # 2
func.println(func.arrayCountLike(&arr, {{{t}}})) # 2
func.println(func.arrayCountLike(&arr, abc)) # 2
func.println(func.arrayCountLike(&arr, null)) # 1
func.println(func.arrayCountLike(&arr, empty)) # 0

func.println()

# Find element's index
# func.arrayIndexOf(arrPtr, ele) # Will return the first index where the element was found (strict equals) or -1 if it was not found
func.println(func.arrayIndexOf(&arr, 1)) # 0
func.println(func.arrayIndexOf(&arr, 1.)) # 3
func.println(func.arrayIndexOf(&arr, t)) # 5
func.println(func.arrayIndexOf(&arr, {{{t}}})) # 6
func.println(func.arrayIndexOf(&arr, abc)) # 7

func.println()

# func.arrayLastIndexOf(arrPtr, ele) # Will return the last index where the element was found (strict equals) or -1 if it was not found
func.println(func.arrayLastIndexOf(&arr, 1)) # 0
func.println(func.arrayLastIndexOf(&arr, 1.)) # 3
func.println(func.arrayLastIndexOf(&arr, t)) # 5
func.println(func.arrayLastIndexOf(&arr, {{{t}}})) # 6
func.println(func.arrayLastIndexOf(&arr, abc)) # 9

func.println()

# func.arrayIndexLike(arrPtr, ele) # Will return the first index where the element was found (normal equals) or -1 if it was not found
func.println(func.arrayIndexLike(&arr, 1)) # 0
func.println(func.arrayIndexLike(&arr, 1.)) # 0
func.println(func.arrayIndexLike(&arr, t)) # 5
func.println(func.arrayIndexLike(&arr, {{{t}}})) # 5
func.println(func.arrayIndexLike(&arr, abc)) # 7

func.println()

# func.arrayLastIndexLike(arrPtr, ele) # Will return the last index where the element was found (normal equals) or -1 if it was not found
func.println(func.arrayLastIndexLike(&arr, 1)) # 3
func.println(func.arrayLastIndexLike(&arr, 1.)) # 3
func.println(func.arrayLastIndexLike(&arr, t)) # 6
func.println(func.arrayLastIndexLike(&arr, {{{t}}})) # 6
func.println(func.arrayLastIndexLike(&arr, abc)) # 9

func.println()

# Create array with unique values
# func.arrayDistinctValuesOf(arrPtr) # Will return a new array where no two elements are strict equals
func.println(func.arrayDistinctValuesOf(&arr))
func.println(func.arrayDistinctValuesOf(func.arrayOf(test)))
func.println(func.arrayDistinctValuesOf(func.arrayOf(1, 2, 4, test, 1, 42)))
func.println(func.arrayDistinctValuesOf(func.arrayOf(1, 2, 4, test, 1, 42, {{{1}}}, 1., x)))
func.println(func.arrayDistinctValuesOf(func.arrayOf(1., 2, 4, test, 1, 42, {{{1}}}, 1, x)))
func.println(func.arrayDistinctValuesOf(func.arrayOf(40, x, {{{x}}})))
func.println(func.arrayDistinctValuesOf(func.arrayOf()))

func.println()

# func.arrayDistinctValuesLike(arrPtr) # Will return a new array where no two elements are normal equals
func.println(func.arrayDistinctValuesLike(&arr))
func.println(func.arrayDistinctValuesLike(func.arrayOf(test)))
func.println(func.arrayDistinctValuesLike(func.arrayOf(1, 2, 4, test, 1, 42)))
func.println(func.arrayDistinctValuesLike(func.arrayOf(1, 2, 4, test, 1, 42, {{{1}}}, 1., x)))
func.println(func.arrayDistinctValuesLike(func.arrayOf(1., 2, 4, test, 1, 42, {{{1}}}, 1, x)))
func.println(func.arrayDistinctValuesLike(func.arrayOf(40, x, {{{x}}})))
func.println(func.arrayDistinctValuesLike(func.arrayOf()))

func.println()

# Copy an array
&arr2 = &arr # Will copy the array pointer (The content will not be copied [Same references])
func.println(func.arrayGetAll(&arr2))
# Copy an array to a normal variable
$arr = &arr # Will copy the array pointer to $arr
func.println(func.arrayGetAll($arr))

# &LANG arrays can't be copied
&langArray = &LANG_ARGS
func.printError() # Will print "&LANG arrays can't be copied"
func.println(&langArray) # "&langArray" won't be defined

# Combining arrays
&a1 = func.arrayMake(2)
func.arraySetAll(&a1, 1, 2)
&a2 = func.arrayMake(3)
func.arraySetAll(&a2, test, -1, .42)
&aR1 = func.arrayCombine(&a1, &a2)
func.println(func.arrayGetAll(&aR1))
&aR2 = func.arrayCombine(&a1, &a2, &a1) # The same array can be combined multible times
func.println(func.arrayGetAll(&aR2))
&aR3 = func.arrayCombine() # Will return an empty array
func.println(func.arrayGetAll(&aR3))

# Set all elements to null
# func.arrayDelete(arrPtr)
func.arrayDelete(&arr)
func.println(func.arrayGetAll(&arr))

func.println()

# Changing every value of an array to another (mapping)
# func.arrayMap(arrPtr, funcPtr)
# FuncPtr [See: 05_functionPointer.lang]
&testArray = func.arrayOf(A, B, C, D, E, F, G)
func.println(func.arrayGetAll(&testArray))

fp.map = ($ele) -> return func.toValue($ele) # Will convert the char to an ASCII value
func.arrayMap(&testArray, fp.map) # fp.map will be called for every element of the array and every element of the array will be set to the returned value of fp.map
func.println(func.arrayGetAll(&testArray))

func.println()

&testArray = func.arrayOf(A, B, C, D, E, F, G)
func.println(func.arrayGetAll(&testArray))

func.arrayMap(&testArray, func.toValue) # Other function types could be used too: Predefined functions, Linker functions, External functions
func.println(func.arrayGetAll(&testArray))

func.arrayMap(&testArray, func.toChar)
func.println(func.arrayGetAll(&testArray))

# func.arrayMapToNew(arrPtr, funcPtr) # Same as "func.arrayMap()" but returns a new array without modifying the original
&testArray = func.arrayOf(A, B, C, D, E, F, G)
&mappedArray = func.arrayMapToNew(&testArray, func.toValue)
func.println(Mapped: &mappedArray)
func.println(Original: &testArray)

func.println()

# Map arrays to a single value
# func.arrayMapToOne(arrPtr, value, funcPtr) # funcPtr call for the first element: funcPtr(value, currentElement)
                                             # funcPtr call for every other element: funcPtr(previousReturnedValue, currentElement)
                                             # Value will be returned for arrays of size 0
# FuncPtr [See: 06_functionPointer.lang]

&testArray = func.arrayOf(1, 2, 3, 4, 42, -1)
$sum = func.arrayMapToOne(&testArray, 0, func.add) # Will return the sum of all elements
$prod = func.arrayMapToOne(&testArray, 1, func.mul) # Will return the product of all elements
func.println(Sum of func.arrayGetAll(&testArray): $sum\nProduct of func.arrayGetAll(&testArray): $prod)

func.println(func.arrayMapToOne(func.arrayOf(), Empty, func.print)) # func.print will not be called

# func.arrayMapToOne(arrPtr, funcPtr) # funcPtr call for the first two elements: funcPtr(firstElement, secondElement)
                                      # funcPtr call for every other element: funcPtr(previousReturnedValue, currentElement)
                                      # VOID will be returned for empty arrays
                                      # First element will be returned for arrays of size 1

func.println()

&testArray = func.arrayOf(10, 24, 4, 42, -1)
$sum = func.arrayMapToOne(&testArray, func.add)
$prod = func.arrayMapToOne(&testArray, func.mul)
func.println(Sum of func.arrayGetAll(&testArray): $sum\nProduct of func.arrayGetAll(&testArray): $prod)

func.println(func.typeOf(func.arrayMapToOne(func.arrayOf(), func.print))) # func.print will not be called and VOID will be returned
func.println(func.arrayMapToOne(func.arrayOf(Empty), func.print)) # func.print will not be called

func.println()

fp.sumAndMultiplyBy2 = ($prevValue, $ele) -> {
	func.println(Input: $ele and $prevValue)
	$res = func.addi(func.muli($ele, 2), $prevValue)
	func.println(Ouput: $res)
	return $res
}
$sum2 = func.arrayMapToOne(&testArray, 0, fp.sumAndMultiplyBy2)
func.println(Last Output: $sum2)

func.println()

&testArray = func.arrayOf(1, 2, 3, b, def, \s, 4, 42, a)
fp.combineText = ($txt1, $txt2) -> return $txt1$txt2
func.println(func.arrayMapToOne(&testArray, \e, fp.combineText))

func.println()

fp.combineTextInverted = ($txt1, $txt2) -> return $txt2$txt1
func.println(func.arrayMapToOne(&testArray, \e, fp.combineTextInverted))

func.println()

&testArray = func.arrayOf(5, 2, 1, 6)
fp.combineInt = ($num1, $num2) -> return func.toInt($num1$num2)
func.println(func.arrayMapToOne(&testArray, \e, fp.combineInt))

func.println()

# Flatten array
&testArray = func.arrayOf(func.arrayOf(0, 2, 3), func.arrayOf(a, b, c), func.arrayOf(test, abc, null))
func.println(&testArray)
func.println([func.arrayGet(&testArray, 0), func.arrayGet(&testArray, 1), func.arrayGet(&testArray, 2)])
&flattenArray = func.arrayMapToOne(&testArray, func.arrayOf(), func.arrayCombine)
func.println(&flattenArray)

func.println()

# Execute a function for every element of the array
# FuncPtr [See: 05_functionPointer.lang]
# func.arrayForEach(arrPtr, funcPtr) # funcPtr call for every element: funcPtr(currentElement)
# func.arrayEnumerate(arrPtr, funcPtr) # funcPtr call for every element: funcPtr(currentIndex, currentElement)
&testArray = func.arrayOf(1, 2, 3, a, b, c, null)

fp.forEach = ($ele) -> func.println($ele)
func.arrayForEach(&testArray, fp.forEach)

func.println()

func.arrayForEach(&testArray, func.println)

func.println()

fp.enumerate = ($i, $ele) -> func.println($i: $ele)
func.arrayEnumerate(&testArray, fp.enumerate)

func.println()

func.arrayEnumerate(&testArray, func.printTerminal)

func.println()

# Remove an array
# func.freeVar(arrPtr)
func.freeVar(&arr)
func.println(func.arrayGetAll(&arr)) # Will result in an error, because &arr won't exist anymore

# Split a Text
#func.split(arrPtr, Text, Text, [int]) # Creates & Returns arrPtr and splits
#                                        the 2nd argument at the 3rd
#                                        argument [RegEx] (Optional:
#                                        It will split maximal n times)
func.split(&splited, Test;42;1243;fdsds;xyz;f, ;)
func.println(func.arrayGetAll(&splited))

func.split(&splited, Test;42;1243;fdsds;xyz;f, ;, 3)
func.println(func.arrayGetAll(&splited))

#func.split(null", Text, Text, [int]) # Returns arrPtr and splits
#                                        the 2nd argument at the 3rd
#                                        argument [RegEx] (Optional:
#                                        It will split maximal n times)
&split = func.split(null, Test\, test\, abc\, def\, 42\, null\, .5, \,\s)
func.println(&split (Len: func.arrayLength(&split)))
func.println(func.split(null, Test\, test\, abc\, def\, 42\, null\, .5, \,\s))

# $split will be overriden because no literal null or anonymous null value was provided
$split = null
func.println($split)
$split2 = func.split($split, Test\, test\, abc\, def\, 42\, null\, .5, \,\s)
func.println($split (Len: func.arrayLength($split)))
func.println($split2 (Len: func.arrayLength($split2)))

# Convert text to array (= split at every char)
&chars = func.split(null, a-very-long-text-42)
func.println(func.arrayGetAll(&chars))

# func.charsOf(VARARGS) # Returns an array of a text which is split at every char
&chars = func.charsOf(test, text, var-42-abc, 2, 2.)
func.println(func.arrayGetAll(&chars))

func.println()

# func.join(TEXT, ARRAY) # Returns a text value consiting of the values of the array separated by the delimiter text
func.println(func.join(, func.arrayOf()))
func.println(func.join(\e, func.arrayOf()))
func.println(func.join(abc, func.arrayOf()))
func.println(func.join(, func.arrayOf(1, test)))
func.println(func.join(\e, func.arrayOf(1, test)))
func.println(func.join(abc, func.arrayOf(1, test)))
func.println(func.join(-, func.arrayOf(test, abc, 42)))

func.println()

# Array unpacking (Every element of the array will be unpacked as single arguments for a function call)
# &arr...
&arr = func.arrayOf(3, 1, 2, 5, 7, 42)
$sum = func.addi(&arr...)
func.println($sum)

func.println()

# Array unpacking as VARARGs argument
func.println(&arr...)
func.println(&arr..., test)
func.println(&arr...test)
func.println(test, &arr...)
func.println(test&arr...)

func.println()

# Array copying with array unpacking
&copy = func.arrayOf(&arr...)
func.println(&arr)
func.println(&copy)

func.println()

func.arraySet(&copy, 0, test)
func.println(&arr)
func.println(&copy)
