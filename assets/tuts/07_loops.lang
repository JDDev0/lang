lang.name = Loops
lang.version = v1.0.0

# Loop statements
{
	# While loop
	# con.while(condition)
	#     ...
	# con.endloop
	$num = 50
	
	con.while($num > 41)
		func.println($num)
		$num = func.subi($num, 1)
	con.endloop
	
	# Until loop
	# con.until(condition)
	#     ...
	# con.endloop
	$win = 0
	$num = func.modi(func.rand(), 10)
	con.until($win)
		$guess = func.addi(func.modi(func.rand(), 10))
		con.if($guess < $num)
			func.printTerminal(3, The number is larger than $guess!)
		con.elif($guess > $num)
			func.printTerminal(3, The number is smaller than $guess!)
		con.else
			$win = 1
			
			func.printTerminal(2, You got the number $guess!)
		con.endif
	con.endloop
	
	# Repeat loop
	# con.repeat(varPtr, count) # varPtr can be null
	#     ...
	# con.endloop
	$i
	func.println(Before Loop: $i)
	con.repeat($[i], 10)
		func.println(In Loop: $i)
	con.endloop
	func.println(After Loop: $i)
	
	con.repeat(null, 10)
		func.println(In Loop2: $i)
	con.endloop
	
	con.repeat($[i], 8)
		func.printTerminal(func.deci($i), TEXT-TEXT-TEXT)
	con.endloop
	
	$j
	con.repeat($[j], func.modi(func.rand(), 10))
		func.printTerminal(0, RANDOM: $j)
	con.endloop
	
	fp.getFP = () -> return () -> return 10
	con.repeat($[j], fp.getFP()())
		func.println($j with call of returned value)
	con.endloop
	
	func.println()
	
	# Continue and break
	# con.break # Breaks the current loop
	# con.continue # Breaks the current iteration and skips to the next iteration
	$val = 42
	con.while(1)
		con.if($val == 50)
			con.break
		con.endif
		
		func.println(Value: $val)
		$val = func.inci($val)
	con.endloop # Will output numbers from 42 to 49
	
	func.println()
	
	# Endless loop with con.loop (Can only be exited with break or continue with level > 1)
	$val = 42
	con.loop
		con.if($val == 50)
			con.break
		con.endif
		
		func.println(Value: $val)
		$val = func.inci($val)
	con.endloop # Will output numbers from 42 to 49
	
	func.println()
	
	$val = 41
	con.while($val < 50)
		$val = func.inci($val)
		
		con.if($val == 45)
			con.continue
		con.endif
		
		func.println(Value: $val)
	con.endloop # Will output numbers from 42 to 49 without 45
	
	func.println()
	
	# Continue and break of outer loops
	# con.break(num) # Breaks the nth loop level (loop level 1 is the same as con.break without an argument
	# con.continue(num) # Breaks current iteration and skips to the next iteration in the nth loop level (loop level 1 is the same as con.continue without an argument
	# -> num can be an expression with function call of returned value
	$val = 42
	$i
	con.loop
		con.repeat($[i], 2)
			func.println(	Inner Value: $i)
			
			con.if($val == 50)
				con.break(2) # Will break the "con.loop" loop
			con.endif
		con.endloop
		
		func.println(Value: $val)
		$val = func.inci($val)
	con.endloop # Will output numbers from 42 to 49 with inner values of 0 and 1 except the last inner loop iteration
	
	func.println()
	func.println()
	
	$val = 41
	con.while($val < 50)
		$val = func.inci($val)
		
		func.println()
		
		con.repeat($[i], 2)
			func.println(	Inner Value: $i)
			
			con.if($val == 45)
				con.continue(2) # Will continue the "con.while($val < 50)" loop
			con.endif
		con.endloop
		
		func.println(Value: $val)
	con.endloop # Will output numbers from 42 to 49 without 45 with inner values of 0 and 1 except the inner loop iteration where $val = 45
}

# Loop functions
{
	# For loop
	# func.repeat(funcPtr, int) # Will call the function pointer n times
	#                             the funcPtr gets the actual iteration number

	fp.printColor = ($i) -> {
		$i = func.deci($i) #[0, 7] for repeat will be changed to [-1, 6]
		
		func.printTerminal($i, $i: This is a for loop test!)
	}
	func.repeat(fp.printColor, 8)

	# Copy value from function pointer to the caller
	# func.copyAfterFP(varPtr, varPtr)
	# func.copyAfterFP(arrPtr, arrPtr)
	# func.copyAfterFP(funcPtr, funcPtr)
	# -> The value from the second arg will be copied to the location
	#    (in the function pointer var scope) of the var from the first
	#    value after the function pointer was executed
	#    -> "*Caller.var[1st arg] = *Function.var[2nd arg]"

	$a = Test
	fp.changeA = ($a) -> {
		func.copyAfterFP($[a], $[a])
		func.println(Local: $a)
	}
	func.println($a)
	fp.changeA(100)
	func.println($a)

	$var = Test2
	fp.change = ($ptr, $value) -> {
		func.println(Local: $value)
		func.copyAfterFP($ptr, $[value])
	}
	func.println($var)
	fp.change($[var], 42)
	func.println($var)

	$test = Test3
	fp.change = () -> {
		$test = $test - Tested
		func.println(Local: $test)
		func.copyAfterFP($[test], $[test])
	}
	func.println($test)
	fp.change()
	func.println($test)

	$test = Test4
	fp.change = () -> {
		func.copyAfterFP($[test], $[test]) # Can be executed anywere
			                               # in the function
		$test = $test - Tested
		func.println(Local: $test)
	}
	func.println($test)
	fp.change()
	func.println($test)

	$test = Test5
	fp.change = () -> {
		$test = $test - Tested
		func.println(Local: $test)
	}
	func.println($test)
	fp.change()
	func.println($test)

	# While loop
	# func.repeatWhile(funcPtr, funcPtr) # Will call the first function pointer
	#                                      while the second function pointer returns true
	$num = 50

	fp.printFunc = () -> {
		func.println($num)
		$num = func.deci($num)
		func.copyAfterFP($[num], $[num])
	}
	fp.test = () -> return con.condition($num > 41)
	func.repeatWhile(fp.printFunc, fp.test)

	# Until loop
	# func.repeatUntil(funcPtr, funcPtr) # Will call the first function pointer
	#                                      while the second function pointer returns false
	$win = 0
	$num = func.modi(func.rand(), 10)
	fp.printFunc = () -> {
		$guess = func.addi(func.modi(func.rand(), 10))
		con.if($guess < $num)
			func.printTerminal(3, The number is larger than $guess!)
		con.elif($guess > $num)
			func.printTerminal(3, The number is smaller than $guess!)
		con.else
			$win = 1
			func.copyAfterFP($[win], $[win])
			func.printTerminal(2, You got the number $guess!)
		con.endif
	}
	fp.test = () -> return $win
	func.repeatUntil(fp.printFunc, fp.test)

	# Arrays for each function
	# func.arrayForEach(arrPtr, funcPtr)
	# fp.funcPtr = ($ele) -> ...
	# The provived function will be executed for each element of the array

	&a = func.arrayOf(0, 2, 4, 5, 6, abc, test, 42, 90, 100)

	fp.printElement = ($ele) -> {
		func.println(Element: $ele)
	}
	func.arrayForEach(&a, fp.printElement)

	$output
	fp.addElementToOuput = ($e) -> {
		con.if($output == null)
			$output = $e
		con.else
			$output = $output, $e
		con.endif
		
		func.copyAfterFP($[output], $[output])
	}
	func.arrayForEach(&a, fp.addElementToOuput)
	func.println($output)
}
