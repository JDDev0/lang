lang.name = Loops
lang.version = v0.2.0

# For loop
# func.repeat(funcPtr, int) # Will call the function pointer n times
#                             the funcPtr gets the actual iteration number

fp.printColor = ($i) -> {
	$i = func.subi($i, 1) #[0, 7] for repeat will be changed to [-1, 6]
	
	func.printTerminal($i, $i: This is a for loop test!)
}
func.repeat(fp.printColor, 8)

# Copy value from function pointer to the caller
# func.copyAfterFP(varPtr, varPtr)
# func.copyAfterFP(arrPtr, arrPtr)
# func.copyAfterFP(funcPtr, funcPtr)
# -> The value from the second arg will be copied to the location
#    (in the function pointer var scope) of the var from the first
#    value after the function pointer was executed
#    -> "*Caller.var[1st arg] = *Function.var[2nd arg]"

$a = Test
fp.changeA = ($a) -> {
	func.copyAfterFP($[a], $[a])
	func.printTerminal(1, Local: $a)
}
func.printTerminal(-1, $a)
fp.changeA(100)
func.printTerminal(-1, $a)

$var = Test2
fp.change = ($ptr, $value) -> {
	func.printTerminal(1, Local: $value)
	func.copyAfterFP($ptr, $[value])
}
func.printTerminal(-1, $var)
fp.change($[var], 42)
func.printTerminal(-1, $var)

$test = Test3
fp.change = () -> {
	$test = $test - Tested
	func.printTerminal(1, Local: $test)
	func.copyAfterFP($[test], $[test])
}
func.printTerminal(-1, $test)
fp.change()
func.printTerminal(-1, $test)

$test = Test4
fp.change = () -> {
	func.copyAfterFP($[test], $[test]) # Can be executed anywere
	                                   # in the function
	$test = $test - Tested
	func.printTerminal(1, Local: $test)
}
func.printTerminal(-1, $test)
fp.change()
func.printTerminal(-1, $test)

$test = Test5
fp.change = () -> {
	$test = $test - Tested
	func.printTerminal(1, Local: $test)
}
func.printTerminal(-1, $test)
fp.change()
func.printTerminal(-1, $test)

# While loop
# func.repeatWhile(funcPtr, funcPtr) # Will call the first function pointer
#                                      while the second function pointer returns true
$num = 50

fp.printFunc = () -> {
	func.printTerminal(4, $num)
	$num = func.subi($num, 1)
	func.copyAfterFP($[num], $[num])
}
fp.test = () -> return func.condition($num > 41)
func.repeatWhile(fp.printFunc, fp.test)

# Until loop
# func.repeatUntil(funcPtr, funcPtr) # Will call the first function pointer
#                                      while the second function pointer returns false
$win = 0
$num = func.modi(func.rand(), 10)
fp.printFunc = () -> {
	$guess = func.addi(func.modi(func.rand(), 10))
	con.if($guess < $num)
		func.printTerminal(3, The number is larger than $guess!)
	con.elif($guess > $num)
		func.printTerminal(3, The number is smaller than $guess!)
	con.else
		$win = 1
		func.copyAfterFP($[win], $[win])
		func.printTerminal(2, You got the number $guess!)
	con.endif
}
fp.test = () -> return $win
func.repeatUntil(fp.printFunc, fp.test)

# Arrays for each function
# func.arrayForEach(arrPtr, funcPtr)
# fp.funcPtr = ($ele) -> ...
# The provived function will be executed for each element of the array

func.arrayMake(&a, 10)
func.arraySetAll(&a, 0, 2, 4, 5, 6, abc, test, 42, 90, 100)

fp.printElement = ($ele) -> {
	func.printTerminal(-1, Element: $ele)
}
func.arrayForEach(&a, fp.printElement)

$output
fp.addElementToOuput = ($e) -> {
	con.if($output == null)
		$output = $e
	con.else
		$output = $output, $e
	con.endif
	
	func.copyAfterFP($[output], $[output])
}
func.arrayForEach(&a, fp.addElementToOuput)
func.printTerminal(2, $output)
