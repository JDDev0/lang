lang.name = Types and casts
lang.version = v1.0.0

# Types (v1.0.0):
#   TEXT
#   CHAR
#   INT
#   LONG
#   FLOAT
#   DOUBLE
#   BYTE_BUFFER
#   ARRAY
#   LIST
#   VAR_POINTER
#   FUNCTION_POINTER
#   ERROR
#   STRUCT
#   NULL
#   VOID
#   ARGUMENT_SEPARATOR
#   TYPE

# Predefined Struct-Types (v1.0.0):
#   &Complex($real{DOUBLE}, $imag{DOUBLE})
#   &StackTraceElement($path{?TEXT}, $file{?TEXT}, $functionName{?TEXT}, $modulePath{?TEXT}, $moduleFile{$?TEXT})

# LANG variables with type as value: $LANG_TYPE_<type>
func.println($LANG_TYPE_TEXT)
func.println($LANG_TYPE_CHAR)
func.println($LANG_TYPE_INT)
func.println($LANG_TYPE_LONG)
func.println($LANG_TYPE_FLOAT)
func.println($LANG_TYPE_DOUBLE)
func.println($LANG_TYPE_BYTE_BUFFER)
func.println($LANG_TYPE_ARRAY)
func.println($LANG_TYPE_LIST)
func.println($LANG_TYPE_VAR_POINTER)
func.println($LANG_TYPE_FUNCTION_POINTER)
func.println($LANG_TYPE_STRUCT)
func.println($LANG_TYPE_ERROR)
func.println($LANG_TYPE_NULL)
func.println($LANG_TYPE_VOID)
func.println($LANG_TYPE_ARGUMENT_SEPARATOR)
func.println($LANG_TYPE_TYPE)

func.println()

# Get the type of a value
# func.typeOf(any) # Returns the type of the value as type value
func.println(func.typeOf(\e)) # TEXT
func.println(func.typeOf({{{}}})) # TEXT
func.println(func.typeOf(test)) # TEXT

func.println()

func.println(func.typeOf(\s)) # CHAR
func.println(func.typeOf(\n)) # CHAR
func.println(func.typeOf(\t)) # CHAR
func.println(func.typeOf(\#)) # CHAR
func.println(func.typeOf(a)) # CHAR
func.println(func.typeOf(@)) # CHAR

func.println()

func.println(func.typeOf(42)) # INT
func.println(func.typeOf(-42)) # INT
func.println(func.typeOf(0)) # INT
func.println(func.typeOf($LANG_ERRNO_DIV_BY_ZERO)) # INT
func.println(func.typeOf($LANG_INT_MIN)) # LONG

func.println()

func.println(func.typeOf(func.long(42))) # LONG
func.println(func.typeOf(4242424242424242)) # LONG
func.println(func.typeOf($LANG_LONG_MAX)) # LONG

func.println()

func.println(func.typeOf(0.)) # FLOAT
func.println(func.typeOf(.0)) # FLOAT
func.println(func.typeOf(-0.)) # FLOAT
func.println(func.typeOf(.42)) # FLOAT
func.println(func.typeOf(-.42)) # FLOAT
func.println(func.typeOf(1e1)) # FLOAT
func.println(func.typeOf(func.div(2, 0))) # FLOAT
func.println(func.typeOf(424242424242424242424242)) # FLOAT

func.println()

func.println(func.typeOf(.42e100)) # DOUBLE
func.println(func.typeOf(-.42e200)) # DOUBLE
func.println(func.typeOf(1e122)) # DOUBLE
func.println(func.typeOf(424242424242424242424242424242424242424242424242)) # DOUBLE
func.println(func.typeOf($LANG_DOUBLE_NAN)) # DOUBLE

func.println()

func.println(func.typeOf(func.arrayCreate(0))) # ARRAY
func.println(func.typeOf(func.arrayOf())) # ARRAY
func.println(func.typeOf(func.arrayOf(1, abc, test))) # ARRAY

func.println()

func.println(func.typeOf(func.listOf())) # LIST
func.println(func.typeOf(func.listOf(1, abc, test))) # LIST

func.println()

func.println(func.typeOf($[LANG_ERRNO])) # VAR_POINTER
$var
$ptr = $[var]
func.println(func.typeOf($ptr)) # VAR_POINTER

func.println()

func.println(func.typeOf(func.typeOf)) # FUNCTION_POINTER
func.println(func.typeOf(linker.include)) # FUNCTION_POINTER
fp.empty = () -> return
func.println(func.typeOf(fp.empty)) # FUNCTION_POINTER

func.println()

lang.errorOutput = 0 # Disable error output

func.println(func.typeOf($LANG_ERROR_DIV_BY_ZERO)) # ERROR
func.println(func.typeOf(func.truncDiv(2, 0))) # ERROR

func.println()

lang.errorOutput = 1 # Re-enable error output

func.println(func.typeOf(null)) # NULL

func.println()

func.println(func.typeOf()) # VOID
func.println(func.typeOf(\!)) # VOID
func.println(func.typeOf(func.print(\e))) # VOID

func.println()

# ARGUMENT_SEPARATOR values are only used in the execution of function calls, a value of this type can only be gotten by non-standard Lang functions

func.println()
func.println(func.typeOf($LANG_TYPE_TEXT)) # TYPE
func.println(func.typeOf($LANG_TYPE_TYPE)) # TYPE
func.println(func.typeOf(func.typeOf(42))) # TYPE
func.println(func.typeOf(func.typeOf($LANG_TYPE_TYPE))) # TYPE

func.println()

# Check if a value is of a certain type
# func.isInstanceOf(any, TYPE) # Returns 1 if any is of type TYPE else 0
func.println(func.isInstanceOf(abc, $LANG_TYPE_TEXT)) # 1
func.println(func.isInstanceOf(\e, $LANG_TYPE_TEXT)) # 1
func.println(func.isInstanceOf(a, $LANG_TYPE_TEXT)) # 0
func.println(func.isInstanceOf(a, $LANG_TYPE_CHAR)) # 1
func.println(func.isInstanceOf(42, $LANG_TYPE_TEXT)) # 0
func.println(func.isInstanceOf(42, $LANG_TYPE_INT)) # 1
func.println(func.isInstanceOf(\!, $LANG_TYPE_VOID)) # 1
&a = func.arrayCreate(0)
func.println(func.isInstanceOf(&a, $LANG_TYPE_ARRAY)) # 1
func.println(func.isInstanceOf(&a, $LANG_TYPE_NULL)) # 0
&e = null
func.println(func.isInstanceOf(&e, $LANG_TYPE_ARRAY)) # 0
func.println(func.isInstanceOf(&e, $LANG_TYPE_NULL)) # 1

func.println(\n)

# Type conversion functions (Explicit cast)
lang.errorOutput = 0
$val = 42
$ptr = $[val]

fp.printCastAndTypes = (fp.conversionFunc, $[value]) -> {
	$cast = fp.conversionFunc($*value)
	func.printf(%-20s [%-16s] => %-20s [%-6s]%n, $*value, func.typeOf($*value), $cast, func.typeOf($cast))
}

# func.text(any) # Casts the provided value to a text value (No implicit casts will be executed)
fp.printCastAndTypes(func.text, abc)
fp.printCastAndTypes(func.text, {{{80}}})
fp.printCastAndTypes(func.text, {{{0080}}})
fp.printCastAndTypes(func.text, {{{80.4}}})
fp.printCastAndTypes(func.text, {{{0080.4}}})
fp.printCastAndTypes(func.text, {{{1.8e4}}})
fp.printCastAndTypes(func.text, {{{001.8e4}}})
fp.printCastAndTypes(func.text, {{{1.8E4}}})
fp.printCastAndTypes(func.text, {{{NaN}}})
fp.printCastAndTypes(func.text, func.arrayOf())
fp.printCastAndTypes(func.text, func.arrayOf(1, abc, test, 0))
fp.printCastAndTypes(func.text, func.listOf())
fp.printCastAndTypes(func.text, func.listOf(1, abc, test, 0))
fp.printCastAndTypes(func.text, $ptr)
fp.printCastAndTypes(func.text, $[LANG_ERRNO])
fp.printCastAndTypes(func.text, func.pointerTo(func.text))
fp.printCastAndTypes(func.text, func.text)
fp.printCastAndTypes(func.text, func.randChoice(func.arrayOf()))
fp.printCastAndTypes(func.text, null)
fp.printCastAndTypes(func.text, 42)
fp.printCastAndTypes(func.text, func.long(42))
fp.printCastAndTypes(func.text, 42.)
fp.printCastAndTypes(func.text, 1.8e4)
fp.printCastAndTypes(func.text, 1.8E4)
fp.printCastAndTypes(func.text, $LANG_FLOAT_POS_INF)
fp.printCastAndTypes(func.text, $LANG_FLOAT_NAN)
fp.printCastAndTypes(func.text, func.double(42.))
fp.printCastAndTypes(func.text, $LANG_DOUBLE_POS_INF)
fp.printCastAndTypes(func.text, $LANG_DOUBLE_NAN)
fp.printCastAndTypes(func.text, NaN)
fp.printCastAndTypes(func.text, -NaN)
fp.printCastAndTypes(func.text, -Infinity)
fp.printCastAndTypes(func.text, a)
fp.printCastAndTypes(func.text, $LANG_ERROR_DIV_BY_ZERO)
fp.printCastAndTypes(func.text, $LANG_TYPE_ARGUMENT_SEPARATOR)

func.println()

# func.char(any) # Casts the provided value to a char value (No implicit casts will be executed)
fp.printCastAndTypes(func.char, abc) # Error
fp.printCastAndTypes(func.char, {{{80}}}) # Error
fp.printCastAndTypes(func.char, {{{0080}}}) # Error
fp.printCastAndTypes(func.char, {{{80.4}}}) # Error
fp.printCastAndTypes(func.char, {{{0080.4}}}) # Error
fp.printCastAndTypes(func.char, {{{1.8e4}}}) # Error
fp.printCastAndTypes(func.char, {{{001.8e4}}}) # Error
fp.printCastAndTypes(func.char, {{{1.8E4}}}) # Error
fp.printCastAndTypes(func.char, {{{NaN}}}) # Error
fp.printCastAndTypes(func.char, func.arrayOf()) # Error
fp.printCastAndTypes(func.char, func.arrayOf(1, abc, test, 0)) # Error
fp.printCastAndTypes(func.char, func.listOf()) # Error
fp.printCastAndTypes(func.char, func.listOf(1, abc, test, 0)) # Error
fp.printCastAndTypes(func.char, $ptr) # Error
fp.printCastAndTypes(func.char, $[LANG_ERRNO]) # Error
fp.printCastAndTypes(func.char, func.pointerTo(func.text)) # Error
fp.printCastAndTypes(func.char, func.text) # Error
fp.printCastAndTypes(func.char, func.randChoice(func.arrayOf())) # Error
fp.printCastAndTypes(func.char, null) # Error
fp.printCastAndTypes(func.char, 42)
fp.printCastAndTypes(func.char, func.long(42))
fp.printCastAndTypes(func.char, 42.)
fp.printCastAndTypes(func.char, 1.8e4)
fp.printCastAndTypes(func.char, 1.8E4)
fp.printCastAndTypes(func.char, $LANG_FLOAT_POS_INF)
fp.printCastAndTypes(func.char, $LANG_FLOAT_NAN)
fp.printCastAndTypes(func.char, func.double(42.))
fp.printCastAndTypes(func.char, $LANG_DOUBLE_POS_INF)
fp.printCastAndTypes(func.char, $LANG_DOUBLE_NAN)
fp.printCastAndTypes(func.char, NaN) # Error
fp.printCastAndTypes(func.char, -NaN) # Error
fp.printCastAndTypes(func.char, -Infinity) # Error
fp.printCastAndTypes(func.char, a)
fp.printCastAndTypes(func.char, $LANG_ERROR_DIV_BY_ZERO) # Error
fp.printCastAndTypes(func.char, $LANG_TYPE_ARGUMENT_SEPARATOR) # Error

func.println()

# func.int(any) # Casts the provided value to an int value (No implicit casts will be executed)
fp.printCastAndTypes(func.int, abc) # Error
fp.printCastAndTypes(func.int, {{{80}}})
fp.printCastAndTypes(func.int, {{{0080}}})
fp.printCastAndTypes(func.int, {{{80.4}}}) # Error
fp.printCastAndTypes(func.int, {{{0080.4}}}) # Error
fp.printCastAndTypes(func.int, {{{1.8e4}}}) # Error
fp.printCastAndTypes(func.int, {{{001.8e4}}}) # Error
fp.printCastAndTypes(func.int, {{{1.8E4}}}) # Error
fp.printCastAndTypes(func.int, {{{NaN}}}) # Error
fp.printCastAndTypes(func.int, func.arrayOf())
fp.printCastAndTypes(func.int, func.arrayOf(1, abc, test, 0))
fp.printCastAndTypes(func.int, func.listOf())
fp.printCastAndTypes(func.int, func.listOf(1, abc, test, 0))
fp.printCastAndTypes(func.int, $ptr) # Error
fp.printCastAndTypes(func.int, $[LANG_ERRNO]) # Error
fp.printCastAndTypes(func.int, func.pointerTo(func.text)) # Error
fp.printCastAndTypes(func.int, func.text) # Error
fp.printCastAndTypes(func.int, func.randChoice(func.arrayOf())) # Error
fp.printCastAndTypes(func.int, null) # Error
fp.printCastAndTypes(func.int, 42)
fp.printCastAndTypes(func.int, func.long(42))
fp.printCastAndTypes(func.int, 42.)
fp.printCastAndTypes(func.int, 1.8e4)
fp.printCastAndTypes(func.int, 1.8E4)
fp.printCastAndTypes(func.int, $LANG_FLOAT_POS_INF)
fp.printCastAndTypes(func.int, $LANG_FLOAT_NAN)
fp.printCastAndTypes(func.int, func.double(42.))
fp.printCastAndTypes(func.int, $LANG_DOUBLE_POS_INF)
fp.printCastAndTypes(func.int, $LANG_DOUBLE_NAN)
fp.printCastAndTypes(func.int, NaN) # Error
fp.printCastAndTypes(func.int, -NaN) # Error
fp.printCastAndTypes(func.int, -Infinity) # Error
fp.printCastAndTypes(func.int, a)
fp.printCastAndTypes(func.int, $LANG_ERROR_DIV_BY_ZERO)
fp.printCastAndTypes(func.int, $LANG_TYPE_ARGUMENT_SEPARATOR) # Error

func.println()

# func.long(any) # Casts the provided value to a long value (No implicit casts will be executed)
fp.printCastAndTypes(func.long, abc) # Error
fp.printCastAndTypes(func.long, {{{80}}})
fp.printCastAndTypes(func.long, {{{0080}}})
fp.printCastAndTypes(func.long, {{{80.4}}}) # Error
fp.printCastAndTypes(func.long, {{{0080.4}}}) # Error
fp.printCastAndTypes(func.long, {{{1.8e4}}}) # Error
fp.printCastAndTypes(func.long, {{{001.8e4}}}) # Error
fp.printCastAndTypes(func.long, {{{1.8E4}}}) # Error
fp.printCastAndTypes(func.long, {{{NaN}}}) # Error
fp.printCastAndTypes(func.long, func.arrayOf())
fp.printCastAndTypes(func.long, func.arrayOf(1, abc, test, 0))
fp.printCastAndTypes(func.long, func.listOf())
fp.printCastAndTypes(func.long, func.listOf(1, abc, test, 0))
fp.printCastAndTypes(func.long, $ptr) # Error
fp.printCastAndTypes(func.long, $[LANG_ERRNO]) # Error
fp.printCastAndTypes(func.long, func.pointerTo(func.text)) # Error
fp.printCastAndTypes(func.long, func.text) # Error
fp.printCastAndTypes(func.long, func.randChoice(func.arrayOf())) # Error
fp.printCastAndTypes(func.long, null) # Error
fp.printCastAndTypes(func.long, 42)
fp.printCastAndTypes(func.long, func.long(42))
fp.printCastAndTypes(func.long, 42.)
fp.printCastAndTypes(func.long, 1.8e4)
fp.printCastAndTypes(func.long, 1.8E4)
fp.printCastAndTypes(func.long, $LANG_FLOAT_POS_INF)
fp.printCastAndTypes(func.long, $LANG_FLOAT_NAN)
fp.printCastAndTypes(func.long, func.double(42.))
fp.printCastAndTypes(func.long, $LANG_DOUBLE_POS_INF)
fp.printCastAndTypes(func.long, $LANG_DOUBLE_NAN)
fp.printCastAndTypes(func.long, NaN) # Error
fp.printCastAndTypes(func.long, -NaN) # Error
fp.printCastAndTypes(func.long, -Infinity) # Error
fp.printCastAndTypes(func.long, a)
fp.printCastAndTypes(func.long, $LANG_ERROR_DIV_BY_ZERO)
fp.printCastAndTypes(func.long, $LANG_TYPE_ARGUMENT_SEPARATOR) # Error

func.println()

# func.float(any) # Casts the provided value to a float value (No implicit casts will be executed)
fp.printCastAndTypes(func.float, abc) # Error
fp.printCastAndTypes(func.float, {{{80}}})
fp.printCastAndTypes(func.float, {{{0080}}})
fp.printCastAndTypes(func.float, {{{80.4}}})
fp.printCastAndTypes(func.float, {{{0080.4}}})
fp.printCastAndTypes(func.float, {{{1.8e4}}})
fp.printCastAndTypes(func.float, {{{001.8e4}}})
fp.printCastAndTypes(func.float, {{{1.8E4}}})
fp.printCastAndTypes(func.float, {{{NaN}}})
fp.printCastAndTypes(func.float, func.arrayOf())
fp.printCastAndTypes(func.float, func.arrayOf(1, abc, test, 0))
fp.printCastAndTypes(func.float, func.listOf())
fp.printCastAndTypes(func.float, func.listOf(1, abc, test, 0))
fp.printCastAndTypes(func.float, $ptr) # Error
fp.printCastAndTypes(func.float, $[LANG_ERRNO]) # Error
fp.printCastAndTypes(func.float, func.pointerTo(func.text)) # Error
fp.printCastAndTypes(func.float, func.text) # Error
fp.printCastAndTypes(func.float, func.randChoice(func.arrayOf())) # Error
fp.printCastAndTypes(func.float, null) # Error
fp.printCastAndTypes(func.float, 42)
fp.printCastAndTypes(func.float, func.long(42))
fp.printCastAndTypes(func.float, 42.)
fp.printCastAndTypes(func.float, 1.8e4)
fp.printCastAndTypes(func.float, 1.8E4)
fp.printCastAndTypes(func.float, $LANG_FLOAT_POS_INF)
fp.printCastAndTypes(func.float, $LANG_FLOAT_NAN)
fp.printCastAndTypes(func.float, func.double(42.))
fp.printCastAndTypes(func.float, $LANG_DOUBLE_POS_INF)
fp.printCastAndTypes(func.float, $LANG_DOUBLE_NAN)
fp.printCastAndTypes(func.float, NaN)
fp.printCastAndTypes(func.float, -NaN)
fp.printCastAndTypes(func.float, -Infinity)
fp.printCastAndTypes(func.float, a)
fp.printCastAndTypes(func.float, $LANG_ERROR_DIV_BY_ZERO)
fp.printCastAndTypes(func.float, $LANG_TYPE_ARGUMENT_SEPARATOR) # Error

func.println()

# func.double(any) # Casts the provided value to a double value (No implicit casts will be executed)
fp.printCastAndTypes(func.double, abc) # Error
fp.printCastAndTypes(func.double, {{{80}}})
fp.printCastAndTypes(func.double, {{{0080}}})
fp.printCastAndTypes(func.double, {{{80.4}}})
fp.printCastAndTypes(func.double, {{{0080.4}}})
fp.printCastAndTypes(func.double, {{{1.8e4}}})
fp.printCastAndTypes(func.double, {{{001.8e4}}})
fp.printCastAndTypes(func.double, {{{1.8E4}}})
fp.printCastAndTypes(func.double, {{{NaN}}})
fp.printCastAndTypes(func.double, func.arrayOf())
fp.printCastAndTypes(func.double, func.arrayOf(1, abc, test, 0))
fp.printCastAndTypes(func.double, func.listOf())
fp.printCastAndTypes(func.double, func.listOf(1, abc, test, 0))
fp.printCastAndTypes(func.double, $ptr) # Error
fp.printCastAndTypes(func.double, $[LANG_ERRNO]) # Error
fp.printCastAndTypes(func.double, func.pointerTo(func.text)) # Error
fp.printCastAndTypes(func.double, func.text) # Error
fp.printCastAndTypes(func.double, func.randChoice(func.arrayOf())) # Error
fp.printCastAndTypes(func.double, null) # Error
fp.printCastAndTypes(func.double, 42)
fp.printCastAndTypes(func.double, func.long(42))
fp.printCastAndTypes(func.double, 42.)
fp.printCastAndTypes(func.double, 1.8e4)
fp.printCastAndTypes(func.double, 1.8E4)
fp.printCastAndTypes(func.double, $LANG_FLOAT_POS_INF)
fp.printCastAndTypes(func.double, $LANG_FLOAT_NAN)
fp.printCastAndTypes(func.double, func.double(42.))
fp.printCastAndTypes(func.double, $LANG_DOUBLE_POS_INF)
fp.printCastAndTypes(func.double, $LANG_DOUBLE_NAN)
fp.printCastAndTypes(func.double, NaN)
fp.printCastAndTypes(func.double, -NaN)
fp.printCastAndTypes(func.double, -Infinity)
fp.printCastAndTypes(func.double, a)
fp.printCastAndTypes(func.double, $LANG_ERROR_DIV_BY_ZERO)
fp.printCastAndTypes(func.double, $LANG_TYPE_ARGUMENT_SEPARATOR) # Error

func.println()

# func.array(any) # Casts the provided value to an array value (No implicit casts will be executed)
fp.printCastAndTypes(func.array, abc) # Error
fp.printCastAndTypes(func.array, {{{80}}}) # Error
fp.printCastAndTypes(func.array, {{{0080}}}) # Error
fp.printCastAndTypes(func.array, {{{80.4}}}) # Error
fp.printCastAndTypes(func.array, {{{0080.4}}}) # Error
fp.printCastAndTypes(func.array, {{{1.8e4}}}) # Error
fp.printCastAndTypes(func.array, {{{001.8e4}}}) # Error
fp.printCastAndTypes(func.array, {{{1.8E4}}}) # Error
fp.printCastAndTypes(func.array, {{{NaN}}}) # Error
fp.printCastAndTypes(func.array, func.arrayOf())
fp.printCastAndTypes(func.array, func.arrayOf(1, abc, test, 0))
fp.printCastAndTypes(func.array, func.listOf())
fp.printCastAndTypes(func.array, func.listOf(1, abc, test, 0))
fp.printCastAndTypes(func.array, $ptr) # Error
fp.printCastAndTypes(func.array, $[LANG_ERRNO]) # Error
fp.printCastAndTypes(func.array, func.pointerTo(func.text)) # Error
fp.printCastAndTypes(func.array, func.text) # Error
fp.printCastAndTypes(func.array, func.randChoice(func.arrayOf())) # Error
fp.printCastAndTypes(func.array, null) # Error
fp.printCastAndTypes(func.array, 42) # Error
fp.printCastAndTypes(func.array, func.long(42)) # Error
fp.printCastAndTypes(func.array, 42.) # Error
fp.printCastAndTypes(func.array, 1.8e4) # Error
fp.printCastAndTypes(func.array, 1.8E4) # Error
fp.printCastAndTypes(func.array, $LANG_FLOAT_POS_INF) # Error
fp.printCastAndTypes(func.array, $LANG_FLOAT_NAN) # Error
fp.printCastAndTypes(func.array, func.double(42.)) # Error
fp.printCastAndTypes(func.array, $LANG_DOUBLE_POS_INF) # Error
fp.printCastAndTypes(func.array, $LANG_DOUBLE_NAN) # Error
fp.printCastAndTypes(func.array, NaN) # Error
fp.printCastAndTypes(func.array, -NaN) # Error
fp.printCastAndTypes(func.array, -Infinity) # Error
fp.printCastAndTypes(func.array, a) # Error
fp.printCastAndTypes(func.array, $LANG_ERROR_DIV_BY_ZERO) # Error
fp.printCastAndTypes(func.array, $LANG_TYPE_ARGUMENT_SEPARATOR) # Error

func.println()

# func.list(any) # Casts the provided value to a list value (No implicit casts will be executed)
fp.printCastAndTypes(func.list, abc) # Error
fp.printCastAndTypes(func.list, {{{80}}}) # Error
fp.printCastAndTypes(func.list, {{{0080}}}) # Error
fp.printCastAndTypes(func.list, {{{80.4}}}) # Error
fp.printCastAndTypes(func.list, {{{0080.4}}}) # Error
fp.printCastAndTypes(func.list, {{{1.8e4}}}) # Error
fp.printCastAndTypes(func.list, {{{001.8e4}}}) # Error
fp.printCastAndTypes(func.list, {{{1.8E4}}}) # Error
fp.printCastAndTypes(func.list, {{{NaN}}}) # Error
fp.printCastAndTypes(func.list, func.arrayOf())
fp.printCastAndTypes(func.list, func.arrayOf(1, abc, test, 0))
fp.printCastAndTypes(func.list, func.listOf())
fp.printCastAndTypes(func.list, func.listOf(1, abc, test, 0))
fp.printCastAndTypes(func.list, $ptr) # Error
fp.printCastAndTypes(func.list, $[LANG_ERRNO]) # Error
fp.printCastAndTypes(func.list, func.pointerTo(func.text)) # Error
fp.printCastAndTypes(func.list, func.text) # Error
fp.printCastAndTypes(func.list, func.randChoice(func.arrayOf())) # Error
fp.printCastAndTypes(func.list, null) # Error
fp.printCastAndTypes(func.list, 42) # Error
fp.printCastAndTypes(func.list, func.long(42)) # Error
fp.printCastAndTypes(func.list, 42.) # Error
fp.printCastAndTypes(func.list, 1.8e4) # Error
fp.printCastAndTypes(func.list, 1.8E4) # Error
fp.printCastAndTypes(func.list, $LANG_FLOAT_POS_INF) # Error
fp.printCastAndTypes(func.list, $LANG_FLOAT_NAN) # Error
fp.printCastAndTypes(func.list, func.double(42.)) # Error
fp.printCastAndTypes(func.list, $LANG_DOUBLE_POS_INF) # Error
fp.printCastAndTypes(func.list, $LANG_DOUBLE_NAN) # Error
fp.printCastAndTypes(func.list, NaN) # Error
fp.printCastAndTypes(func.list, -NaN) # Error
fp.printCastAndTypes(func.list, -Infinity) # Error
fp.printCastAndTypes(func.list, a) # Error
fp.printCastAndTypes(func.list, $LANG_ERROR_DIV_BY_ZERO) # Error
fp.printCastAndTypes(func.list, $LANG_TYPE_ARGUMENT_SEPARATOR) # Error

func.println()

# func.bool(any) # Casts the provided value to a bool value (No implicit casts will be executed)
fp.printCastAndTypes(func.bool, abc)
fp.printCastAndTypes(func.bool, {{{80}}})
fp.printCastAndTypes(func.bool, {{{0080}}})
fp.printCastAndTypes(func.bool, {{{80.4}}})
fp.printCastAndTypes(func.bool, {{{0080.4}}})
fp.printCastAndTypes(func.bool, {{{1.8e4}}})
fp.printCastAndTypes(func.bool, {{{001.8e4}}})
fp.printCastAndTypes(func.bool, {{{1.8E4}}})
fp.printCastAndTypes(func.bool, {{{NaN}}})
fp.printCastAndTypes(func.bool, func.arrayOf())
fp.printCastAndTypes(func.bool, func.arrayOf(1, abc, test, 0))
fp.printCastAndTypes(func.bool, func.listOf())
fp.printCastAndTypes(func.bool, func.listOf(1, abc, test, 0))
fp.printCastAndTypes(func.bool, $ptr)
fp.printCastAndTypes(func.bool, $[LANG_ERRNO])
fp.printCastAndTypes(func.bool, func.pointerTo(func.text))
fp.printCastAndTypes(func.bool, func.text)
fp.printCastAndTypes(func.bool, func.randChoice(func.arrayOf()))
fp.printCastAndTypes(func.bool, null)
fp.printCastAndTypes(func.bool, 42)
fp.printCastAndTypes(func.bool, func.long(42))
fp.printCastAndTypes(func.bool, 42.)
fp.printCastAndTypes(func.bool, 1.8e4)
fp.printCastAndTypes(func.bool, 1.8E4)
fp.printCastAndTypes(func.bool, $LANG_FLOAT_POS_INF)
fp.printCastAndTypes(func.bool, $LANG_FLOAT_NAN)
fp.printCastAndTypes(func.bool, func.double(42.))
fp.printCastAndTypes(func.bool, $LANG_DOUBLE_POS_INF)
fp.printCastAndTypes(func.bool, $LANG_DOUBLE_NAN)
fp.printCastAndTypes(func.bool, NaN)
fp.printCastAndTypes(func.bool, -NaN)
fp.printCastAndTypes(func.bool, -Infinity)
fp.printCastAndTypes(func.bool, a)
fp.printCastAndTypes(func.bool, $LANG_ERROR_DIV_BY_ZERO)
fp.printCastAndTypes(func.bool, $LANG_TYPE_ARGUMENT_SEPARATOR)

func.println()

# func.number(any) # Casts the provided value to a number value (No implicit casts will be executed)
fp.printCastAndTypes(func.number, abc) # Error
fp.printCastAndTypes(func.number, {{{80}}})
fp.printCastAndTypes(func.number, {{{0080}}})
fp.printCastAndTypes(func.number, {{{80.4}}})
fp.printCastAndTypes(func.number, {{{0080.4}}})
fp.printCastAndTypes(func.number, {{{1.8e4}}})
fp.printCastAndTypes(func.number, {{{001.8e4}}})
fp.printCastAndTypes(func.number, {{{1.8E4}}})
fp.printCastAndTypes(func.number, {{{NaN}}})
fp.printCastAndTypes(func.number, func.arrayOf())
fp.printCastAndTypes(func.number, func.arrayOf(1, abc, test, 0))
fp.printCastAndTypes(func.number, func.listOf())
fp.printCastAndTypes(func.number, func.listOf(1, abc, test, 0))
fp.printCastAndTypes(func.number, $ptr) # Error
fp.printCastAndTypes(func.number, $[LANG_ERRNO]) # Error
fp.printCastAndTypes(func.number, func.pointerTo(func.text)) # Error
fp.printCastAndTypes(func.number, func.text) # Error
fp.printCastAndTypes(func.number, func.randChoice(func.arrayOf())) # Error
fp.printCastAndTypes(func.number, null) # Error
fp.printCastAndTypes(func.number, 42)
fp.printCastAndTypes(func.number, func.long(42))
fp.printCastAndTypes(func.number, 42.)
fp.printCastAndTypes(func.number, 1.8e4)
fp.printCastAndTypes(func.number, 1.8E4)
fp.printCastAndTypes(func.number, $LANG_FLOAT_POS_INF)
fp.printCastAndTypes(func.number, $LANG_FLOAT_NAN)
fp.printCastAndTypes(func.number, func.double(42.))
fp.printCastAndTypes(func.number, $LANG_DOUBLE_POS_INF)
fp.printCastAndTypes(func.number, $LANG_DOUBLE_NAN)
fp.printCastAndTypes(func.number, NaN)
fp.printCastAndTypes(func.number, -NaN)
fp.printCastAndTypes(func.number, -Infinity)
fp.printCastAndTypes(func.number, a)
fp.printCastAndTypes(func.number, $LANG_ERROR_DIV_BY_ZERO)
fp.printCastAndTypes(func.number, $LANG_TYPE_ARGUMENT_SEPARATOR) # Error

lang.errorOutput = 1
