lang.name = Vars
lang.version = v1.0.0

# Var: $name = value
$var = Text
$null # null value var

func.println($var)  # Will print "Text"
func.println(\$var2) # Will print "$var2"
func.println($null) # Will print "null"

func.println(-----------------)

# Var types:
# Null
$var1 # Empty assignment

# Text
$var2 = Test

# Char
$var3 = C

# Int, Long, Float, Double
$var4 = 42

# Float, Double
$var5 = 42.42
$var6 = 42.
$var7 = .42
$var8 = 42e-2
$var9 = 42E3
$var10 = 42E-3

func.println($var1)
func.println($var2)
func.println($var3)
func.println($var4)
func.println($var5)
func.println($var6)
func.println($var7)
func.println($var8)
func.println($var9)
func.println($var10)

func.println(-----------------)

# Multiline text

$mutlilineText = {{{first line
2nd: # no comment
3rd: \n not escaped
4th: # also no comment}}} # Everything between "{{{" and "}}}", no escape chars nor comments

func.println($mutlilineText)

func.println(-----------------)

# Override values
$var5 = New value

func.println($var5)

func.println(-----------------)

# Copy values
$var11 = $var5

func.println($var11)

func.println(-----------------)

# Multi assignment
$c = A Var
$a = $b = $c
func.println(\$a: $a)
func.println(\$b: $b)
func.println(\$c: $c)

# A lang translation must come first
lang.translation = $b = $c # Would be possible
$a = lang.translation.2 = $c # Wouldn't be possible (Result: $a -> "lang.translation.2 = $c" ("$c": Value of $c))
func.println(\$a: $a)
func.println(\$b: $b)
func.println(\$c: $c)

# An empty assignment is not supported
$a = $b = # Won't work (Result: $a -> "$b =" ("$b": Value of $b))
func.println(\$a: $a)
func.println(\$b: $b)
func.println(\$c: $c)

func.println(-----------------)

# Concatination [vars]
$a = Text\s
$b = & Test

$c = $a$b
func.println($c)

func.println(-----------------)

# Concatenation [vars & non vars]
$a = ABC-a
func.println($abc) # Will append "bc" after $a

$abc = VALUE
func.println($abc) # Appends nothing to $a, because $abc already exists

$abc = $a
$abc = $abcbc # Will append "bc" after $abc which is a copy of $a
func.println($abc)

func.println(-----------------)

# Referencing and dereferencing of variables
$variable = test
func.println($variable)
func.println($[variable]) # Referencing $variable (Pointer to $variable)

$ptr = $[variable]
func.println($*ptr) # Dereferencing $ptr (Get value $ptr is pointing to)

$*ptr = 42 # Set the value the pointer is pointing to
func.println($variable)

$pointer = $ptr # Copy a pointer
func.println($*pointer)

$*pointer # Set value the pointer is pointing to to null
func.println($variable)

$variable = 42 # Pointers to variable will work after value change
func.println($variable)
$*pointer = 42 - new
func.println($variable)

func.println($*[variable]) # Combined referecing and dereferencing

$ptr2 = $[ptr] # Pointer to pointer
func.println($**ptr2) # Dereferencing twice

$ptr3 = $[[varibale]] # Also pointer to pointer
func.println($**ptr2) # Dereferencing twice

func.println($**[[variable]]) # Combined referecing and dereferencing

$**ptr2 = new value
func.println($variable)

func.println($*variable) # Dereferencing a non poitner will return null

func.println($*variableName) # Dereferencing a not defined variable will be parsed as text

func.println(-----------------)

# $LANG vars
func.println(\$LANG vars)
func.println(• "$LANG_COMPILER_VERSION") # Will print the compiler version
func.println(• "$LANG_PATH") # Will print the path to the lang file
func.println(• "$LANG_RAND_MAX") # Will print the maximal value for func.rand
func.println(• "$LANG_OS_NAME") # Will print the name of the operating system
func.println(• "$LANG_OS_VER") # Will print the version of the operating system
func.println(• "$LANG_OS_ARCH") # Will print the architecture of the operating system
func.println(• "$LANG_OS_FILE_SEPARATOR") # Will print the file separator of the operating system
func.println(• "$LANG_OS_LINE_SEPARATOR") # Will print the line separator (new line) of the operating system
func.println(• "$LANG_FLOAT_NAN") # Will print the NaN float value
func.println(• "$LANG_FLOAT_POS_INF") # Will print the positive infinity float value
func.println(• "$LANG_FLOAT_NEG_INF") # Will print the negative infinity float value
func.println(• "$LANG_DOUBLE_NAN") # Will print the NaN double value
func.println(• "$LANG_DOUBLE_POS_INF") # Will print the positive infinity double value
func.println(• "$LANG_DOUBLE_NEG_INF") # Will print the negative infinity double value
func.println(• "$LANG_MATH_PI") # Will print the closest double value to π
func.println(• "$LANG_MATH_E") # Will print the closest double value to e
func.println(• "&LANG_ARGS") # Will print the command line arguments (Array of TEXT elements, See: 04_arrays.lang) # Try in TermIO window: "executeLang -assets/tuts/02_vars.lang -First arg -Second arg -3rd -42 -TEST"
func.println(• "$LANG_ERRNO") # Will print the errno value or 0 if no error

#$LANG_ERRNO_<errorName> # Error code of the error "errorName"
func.println(• "$LANG_ERRNO_DIV_BY_ZERO") # Will print the error code of the error "DIV_BY_ZERO" (Used to check the exact error in "$LANG_ERRNO")
#$LANG_ERROR_<errorName> # Error object of the error "errorName"
func.println(• "$LANG_ERROR_DIV_BY_ZERO") # Will print the error object of the error "DIV_BY_ZERO" (Used to check the exact error for error returned from functions [See: 03_functions.lang])

func.println(-----------------)

$LANG_COMPILER_VERSION = TEST # $LANG vars can't be changed by the lang file
func.println($LANG_COMPILER_VERSION)

$LANG_TEST = TEST # $LANG vars can't be created either
func.println($LANG_TEST)

func.println($LANG_ERRNO) # $LANG vars can be changed by the interpreter
