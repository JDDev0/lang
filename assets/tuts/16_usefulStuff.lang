lang.name = Useful stuff
lang.version = v1.0.0

# Line continuation
{
	func.printTerminal(3, abc-\
test) # Will print "abc-test", if "\" is at end of line and outside of a multiline text, the line will be split (It must be the end of the line, comments may not come after "\")
# The leading whitespaces of a line after "\" will be parsed
	
	func.printTerminal(4, abc-\
{{{
test
}}})
	
func.printTerminal(5, abc-{{{
test
}}}\
abc)
	
func.printTerminal(6, abc-{{{
test\
}}})
}

func.printTerminal(-1, \n\n\n)

# Multiline comments
{
	# Comment \
	2nd line
	
	# Comment \
	func.printTerminal(-1, test) # In comment
	func.printTerminal(-1, test) # Not in comment
	
	# Comment \
	2nd line \
	3rd line
	
	# Comment {{{
		2nd line
		3rd line
	}}} - 4th line \
	5th line
	
	# Comment \
	2nd line {{{
		3rd line
	}}} - 4th line
}

func.printTerminal(-1, \n\n\n)

# Custom IO functions
{
	con.if(func.isTerminalAvailable())
		fp.input = func.readTerminal
		fp.print = func.printTerminal
		fp.error = ($text...) -> func.printTerminal(5, $text)
	con.else
		fp.input = ($text...) -> {
			con.if($text)
				func.print($text: )
			con.else
				func.print(Input: )
			con.endif
			return func.input()
		}
		fp.print = ($lvl, $text...) -> func.println($text)
		fp.error = func.errorln
	con.endif
	
	$input = fp.input(Test)
	fp.print(1, Input: $input)
	fp.print(2, varars, test)
	fp.error(test error)
	fp.error(test, error, with, varargs)
	
	$input = fp.input() # Empty input message
	fp.print(1, Input: $input)
}

func.printTerminal(-1, \n\n\n)

# Advanced conditions
{
	# XOR: (CONDITION) != (CONDITION)
	func.printTerminal(2, XOR:)
	func.printTerminal(1, (1 > 42) != (1 > 42) = con.condition((1 > 42) != (1 > 42))) # 0
	func.printTerminal(1, (1 > 42) != (1 < 42) = con.condition((1 > 42) != (1 < 42))) # 1
	func.printTerminal(1, (1 < 42) != (1 > 42) = con.condition((1 < 42) != (1 > 42))) # 1
	func.printTerminal(1, (1 < 42) != (1 < 42) = con.condition((1 < 42) != (1 < 42))) # 0
	
	# NXOR: (CONDITION) == (CONDITION)
	func.printTerminal(2, \nNXOR:)
	func.printTerminal(1, (1 > 42) != (1 > 42) = con.condition((1 > 42) == (1 > 42))) # 1
	func.printTerminal(1, (1 > 42) != (1 < 42) = con.condition((1 > 42) == (1 < 42))) # 0
	func.printTerminal(1, (1 < 42) != (1 > 42) = con.condition((1 < 42) == (1 > 42))) # 0
	func.printTerminal(1, (1 < 42) != (1 < 42) = con.condition((1 < 42) == (1 < 42))) # 1
}

func.printTerminal(-1, \n\n\n)

# "Returning" of multiple values
{
	# "Return" is also possible by dereferencing of a pointer: "$*ptr"
	
	# With call by value
	{
		# $column and $row are var pointers
		fp.convertIndexToCoords = ($index, $COLUMN_COUNT, $column, $row) -> {
			$*column = func.modi($index, $COLUMN_COUNT)
			$*row = func.divi($index, $COLUMN_COUNT)
		}
		$index = 42
		$COLUMN_COUNT = 12
		$column = $row = null
		fp.convertIndexToCoords(42, 12, $[column], $[row])
		func.printTerminal(-1, $index with $COLUMN_COUNT columns \= column $column, row $row)
	}
	
	func.printTerminal(-1, \n)
	
	# With call by pointer
	{
		fp.convertIndexToCoords = ($index, $COLUMN_COUNT, $[column], $[row]) -> {
			# "$column" and "$row" are pointers to the corresponding arguments
			$*column = func.modi($index, $COLUMN_COUNT)
			$*row = func.divi($index, $COLUMN_COUNT)
		}
		$index = 42
		$COLUMN_COUNT = 12
		$column = $row = null
		# Two pointers are created for $column" and "$row" during the call process
		fp.convertIndexToCoords(42, 12, $column, $row)
		func.printTerminal(-1, $index with $COLUMN_COUNT columns \= column $column, row $row)
	}
}

# Compiler flags
{
	# Compiler flags can only be changed globally for the current compiler/interpreter instance
	# Compiler flags can be changed at any point of the code (Inside functions, inside if statments, ...)
	
	# Allow terminal redirect
	{
		# lang.allowTermRedirect = BOOL
		# If true, the terminal can be redirected to standard output, standard error, and standard input else it would return an error
		lang.allowTermRedirect = 0 # Default: 1
		
		func.printTerminal(-1, Test)
		func.println(Error: $LANG_ERRNO) # Will print an error if the terminal is not available

		func.getErrorText() # Reset $LANG_ERRNO
		
		$in = func.readTerminal(-1, Test)
		func.println(Error: $LANG_ERRNO [Read: $in]) # Will print an error if the terminal is not available
		
		func.getErrorText() # Reset $LANG_ERRNO
		
		lang.allowTermRedirect = 1
		func.printTerminal(-1, Test)
		func.println(Error: $LANG_ERRNO) # Will print a warning if the terminal is not available
		
		func.getErrorText() # Reset $LANG_ERRNO
		
		$in = func.readTerminal(-1, Test)
		func.println(Error: $LANG_ERRNO [Read: $in]) # Will print a warning if the terminal is not available

		func.getErrorText() # Reset $LANG_ERRNO
	}
}

# Retroactively change value
{
	$val = test	
	fp.changeValue = ($[val]) -> {
		$*val = new value
		
		return CHANGED!
	}
	
	func.printTerminal(-1, $val) - fp.changeValue($val) # Will print "test"

	$val = test # Reset $val to "test"
	func.printTerminal(-1, $val) # Will print "test"
	
	func.printTerminal(-1, $val - fp.changeValue($val)) # Will print "new value", because $val's value can be changed until all argument parts of the function call where the variable is located in are interpred

	$val = test # Reset $val to "test"
	func.printTerminal(-1, $val) # Will print "test"
	
	func.printTerminal(-1, $val - func.strlen(fp.changeValue($val))) # Will als print "new value"
}

# Dynamic function call
{
	$func = func.
	$func = $funcprintTerminal
	# $func is set to "func.printTerminal" as TEXT
	
	$realFunc = func.exec(return $func)
	# Execution of "return func.printTerminal" will return a real function pointer object
	
	$realFunc(6, test)
	# execute function
	
	# Function to convert function name to function pointer
	fp.convertToFP = ($funcName) -> return func.exec(return func.$funcName)
	
	fp.println = fp.convertToFP(println)
	fp.println(TEST)
}

# &LANG var as argument
{
	# Is only possible with call by pointer
	fp.getElement = ($[arrPtr], $index) -> return func.arrayGet($*arrPtr, $index)
	
	func.printTerminal(-1, fp.getElement(&LANG_ARGS, 0))
	func.printTerminal(-1, fp.getElement(&LANG_ARGS, 1))
	func.printTerminal(-1, fp.getElement(&LANG_ARGS, 2))
	func.printTerminal(-1, fp.getElement(&LANG_ARGS, 3))
	func.printTerminal(-1, fp.getElement(&LANG_ARGS, 4))
} 
