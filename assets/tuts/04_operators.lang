lang.name = Operators
lang.version = v1.0.0

# Operators
# General
# @opr                - Length
# ^opr                - Deep copy
# opr1 ||| opr2       - Concat
# opr1 <=> opr2       - Spaceship
# opr1 ?: opr2        - Elvis
# opr1 ?? opr2        - Null coalescing
# opr1 ? opr2 : opr3  - Inline if

# Math
# opr1 ** opr2        - Power
# +opr                - Positive
# -opr                - Inverse
# ~opr                - Bitwise not
# +|opr               - Increment (Will NOT change value of opr)
# ▲opr                - Increment (Will NOT change value of opr) [Alternative non-ascii symbol]
# -|opr               - Decrement (Will NOT change value of opr)
# ▼opr                - Decrement (Will NOT change value of opr) [Alternative non-ascii symbol]
# opr1 * opr2         - Multiplication
# opr1 / opr2         - Division
# opr1 ~/ opr2        - Truncation division
# opr1 // opr2        - Floor division
# opr1 ^/ opr2        - Ceil division
# opr1 % opr2         - Modulo
# opr1 + opr2         - Addition
# opr1 - opr2         - Subtract
# opr1 << opr2        - Left shift
# opr1 >> opr2        - Right shift
# opr1 >>> opr2       - Right zero shift
# opr1 & opr2         - Bitwise and
# opr1 ^ opr2         - Bitwise xor
# opr1 | opr2         - Bitwise or

# Condition
# !opr                - Not
# opr1 ~~ opr2        - Instance of
# opr1 == opr2        - Equals
# opr1 != opr2        - Not equals
# opr1 =~ opr2        - Matches
# opr1 !=~ opr2       - Not matches
# opr1 === opr2       - Strict equals
# opr1 !== opr2       - Strict not equals
# opr1 < opr2         - Less than
# opr1 > opr2         - Greater than
# opr1 <= opr2        - Less than or equals
# opr1 >= opr2        - Greater than or equals
# opr1 && opr2        - And
# opr1 || opr2        - Or

# All
# (opr)               - Grouping
# opr1 , opr2         - Comma
# opr1[opr2]          - Get item
# opr1::opr2          - Member access
# opr1?::opr2         - Optional member access
# opr1->opr2          - Member access pointer

# Assignments
# opr1=opr2           - Simple assignment
# opr1=opr2           - Simple translation
# opr1 = opr2         - Normal assignment
# opr1 = opr2         - Normal translation
# opr1 ::= opr2       - Lvalue operation assignment [1]    (Is equivalent to "parser.op(opr1) = opr2")
# opr1 ?= opr2        - Condition operator assignment [1]  (Is equivalent to "parser.con(opr1) = parser.con(opr2)")
# opr1 := opr2        - Math operator assignment [1]       (Is equivalent to "parser.math(opr1) = parser.math(opr2)")
# opr1 $= opr2        - Operation operator assignment [1]  (Is equivalent to "parser.op(opr1) = parser.op(opr2)")
# opr1 += opr2        - Addition assignment [1]            (Is equivalent to "parser.op(opr1) = parser.op((opr1) + (opr2))")
# opr1 -= opr2        - Subtract assignment [1]            (Is equivalent to "parser.op(opr1) = parser.op((opr1) - (opr2))")
# opr1 *= opr2        - Multiplication assignment [1]      (Is equivalent to "parser.op(opr1) = parser.op((opr1) * (opr2))")
# opr1 /= opr2        - Division assignment [1]            (Is equivalent to "parser.op(opr1) = parser.op((opr1) / (opr2))")
# opr1 ~/= opr2       - Truncation division assignment [1] (Is equivalent to "parser.op(opr1) = parser.op((opr1) ~/ (opr2))")
# opr1 //= opr2       - Floor division assignment [1]      (Is equivalent to "parser.op(opr1) = parser.op((opr1) // (opr2))")
# opr1 ^/= opr2       - Ceil division assignment [1]       (Is equivalent to "parser.op(opr1) = parser.op((opr1) ^/ (opr2))")
# opr1 **= opr2       - Power assignment [1]               (Is equivalent to "parser.op(opr1) = parser.op((opr1) ** (opr2))")
# opr1 %= opr2        - Modulo assignment [1]              (Is equivalent to "parser.op(opr1) = parser.op((opr1) % (opr2))")
# opr1 >>= opr2       - Right shift assignment [1]         (Is equivalent to "parser.op(opr1) = parser.op((opr1) >> (opr2))")
# opr1 >>>= opr2      - Right shift zero assignment [1]    (Is equivalent to "parser.op(opr1) = parser.op((opr1) >>> (opr2))")
# opr1 <<= opr2       - Left shift assignment [1]          (Is equivalent to "parser.op(opr1) = parser.op((opr1) << (opr2))")
# opr1 &= opr2        - Bitwise and assignment [1]         (Is equivalent to "parser.op(opr1) = parser.op((opr1) & (opr2))")
# opr1 ^= opr2        - Bitwise xor assignment [1]         (Is equivalent to "parser.op(opr1) = parser.op((opr1) ^ (opr2))")
# opr1 |= opr2        - Bitwise or assignment [1]          (Is equivalent to "parser.op(opr1) = parser.op((opr1) | (opr2))")
# opr1 |||= opr2      - Concat assignment [1]              (Is equivalent to "parser.op(opr1) = parser.op((opr1) ||| (opr2))")
# opr1 ?:= opr2       - Elvis assignment [1]               (Is equivalent to "parser.op(opr1) = parser.op((opr1) ?: (opr2))")
# opr1 ??= opr2       - Null coalescing assignment [1]     (Is equivalent to "parser.op(opr1) = parser.op((opr1) ?? (opr2))")
#
# Footnotes:
# 1) The lvalue will only be parsed as an operation statement if it is not a valid variable name (with or without module prefix)

# Operator precedence/associativity
# Precedence | Operator           | Associativity | Operator name
# ===========|====================|===============|==========================================
#  0         | (opr)              | -             | Grouping
#            | opr1(opr2)         | left-to-right | Function calls
#            | opr1[opr2]         | left-to-right | Get item
#            | opr1::opr2         | left-to-right | Member access [1]
#            | opr1?::opr2        | left-to-right | Optional member access [1]
#            | opr1->opr2         | left-to-right | Member access pointer [1]
# -----------|--------------------|---------------|------------------------------------------
#  1         | @opr               | right-to-left | Length
#            | ^opr               |               | Deep copy
# -----------|--------------------|---------------|------------------------------------------
#  2         | opr1 ** opr2       | right-to-left | Power [2]
# -----------|--------------------|---------------|------------------------------------------
#  3         | +opr               | right-to-left | Positive
#            | -opr               |               | Inverse
#            | ~opr               |               | Bitwise not
#            | +|opr              |               | Increment
#            | ▲opr               |               | Increment [Alternative non-ascii symbol]
#            | -|opr              |               | Decrement
#            | ▼opr               |               | Decrement [Alternative non-ascii symbol]
#            | !opr               |               | Not
# -----------|--------------------|---------------|------------------------------------------
#  4         | opr1 * opr2        | left-to-right | Multiplication
#            | opr1 / opr2        |               | Division
#            | opr1 ~/ opr2       |               | Truncation division
#            | opr1 // opr2       |               | Floor division
#            | opr1 ^/ opr2       |               | Ceil division
#            | opr1 % opr2        |               | Modulo
# -----------|--------------------|---------------|------------------------------------------
#  5         | opr1 ||| opr2      | left-to-right | Concat
#            | opr1 + opr2        |               | Addition
#            | opr1 - opr2        |               | Subtraction
# -----------|--------------------|---------------|------------------------------------------
#  6         | opr1 << opr2       | left-to-right | Left shift
#            | opr1 >> opr2       |               | Right shift
#            | opr1 >>> opr2      |               | Right zero shift
# -----------|--------------------|---------------|------------------------------------------
#  7         | opr1 & opr2        | left-to-right | Bitwise and
# -----------|--------------------|---------------|------------------------------------------
#  8         | opr1 ^ opr2        | left-to-right | Bitwsie xor
# -----------|--------------------|---------------|------------------------------------------
#  9         | opr1 | opr2        | left-to-right | Bitwise or
# -----------|--------------------|---------------|------------------------------------------
# 10         | opr1 <=> opr2      | left-to-right | Spaceship
#            | opr1 ~~ opr2       |               | Instance of
#            | opr1 == opr2       |               | Equals
#            | opr1 != opr2       |               | Not equals
#            | opr1 =~ opr2       |               | Matches
#            | opr1 !=~ opr2      |               | Not matches
#            | opr1 === opr2      |               | Strict equals
#            | opr1 !== opr2      |               | Strict not equals
#            | opr1 < opr2        |               | Less than
#            | opr1 > opr2        |               | Greater than
#            | opr1 <= opr2       |               | Less than or equals
#            | opr1 >= opr2       |               | Greater than or equals
# -----------|--------------------|---------------|------------------------------------------
# 11         | opr1 && opr2       | left-to-right | And
# -----------|--------------------|---------------|------------------------------------------
# 12         | opr1 || opr2       | left-to-right | Or
# -----------|--------------------|---------------|------------------------------------------
# 13         | opr1 ?: opr2       | left-to-right | Elvis
#            | opr1 ?? opr2       |               | Null coalescing
# -----------|--------------------|---------------|------------------------------------------
# 14         | opr1 ? opr2 : opr3 | right-to-left | Inline if
# -----------|--------------------|---------------|------------------------------------------
# 15         | opr1 , opr2        | left-to-right | Comma
# -----------|--------------------|---------------|------------------------------------------
# 16         | opr1 = opr2        | right-to-left | Normal assignment
#            | opr1 = opr2        |               | Translation
#            | opr1 ::= opr2      |               | Lvalue operation assignment
#            | opr1 ?= opr2       |               | Condition operator assignment
#            | opr1 := opr2       |               | Math operator assignment
#            | opr1 $= opr2       |               | Operation operator assignment
#            | opr1 += opr2       |               | Addition assignment
#            | opr1 -= opr2       |               | Subtraction assignment
#            | opr1 *= opr2       |               | Multiplication assignment
#            | opr1 /= opr2       |               | Division assignment
#            | opr1 ~/= opr2      |               | Truncation division assignment
#            | opr1 //= opr2      |               | Floor division assignment
#            | opr1 ^/= opr2      |               | Ceil division assignment
#            | opr1 **= opr2      |               | Power assignment
#            | opr1 %= opr2       |               | Modulo assignment
#            | opr1 >>= opr2      |               | Right shift assignment
#            | opr1 >>>= opr2     |               | Right zero shift assignment
#            | opr1 <<= opr2      |               | Left shift assignment
#            | opr1 &= opr2       |               | Bitwise and assignment
#            | opr1 ^= opr2       |               | Bitwise xor assignment
#            | opr1 |= opr2       |               | Bitwise or assignment
#            | opr1 |||= opr2     |               | Concat assignment
#            | opr1 ?:= opr2      |               | Elvis assignment
#            | opr1 ??= opr2      |               | Null coalescing assignment
#
# Footnotes:
# 1) The unary operators (@, ^, +, -, ~, +|, ▲, -|, ▼, and !) have a higher binding than the member access operators if they are on the right of a member access operator.
# 2) The unary operators (+, -, ~, +|, ▲, -|, ▼, and !) have a higher binding than the power operator if they are on the right of the power operator.
# 
# Some operators have multiple meanings but they keep the same precedence and associativity

# Parser functions
# parser.con(opr) # Condition
# parser.math(opr) # Math expression
# parser.op(opr) # Operator expression (Math expression & Condition)

func.println(2 && 3)
func.println(parser.con(2 && 3))
func.println(parser.math(2 && 3)) # Will crash, because it will be parses as: 2 BITWISE_AND (& 3)
func.println(parser.op(2 && 3))

func.println()
func.println(2 & 3)
func.println(parser.con(2 & 3)) # Will return 1 because "2 & 3" is parsed as text value
func.println(parser.math(2 & 3))
func.println(parser.op(2 & 3))

func.println()
func.println(0 & 3)
func.println(parser.con(0 & 3)) # Will return 1 because "2 & 3" is parsed as text value
func.println(parser.math(0 & 3))
func.println(parser.op(0 & 3))

# Parser functions can be used inside parser functions
func.println()
func.println(parser.math(4 + parser.con(abc && parser.op(1 + 3 === 4))))
# Wil be parsed as:
# 4 ADD (abc AND ((1 ADD 3) STRICT_EQUALS 4))
# 4 ADD (abc AND (4 STRICT_EQUALS 4))
# 4 ADD (abc AND 1)
# 4 ADD 1
# 5

# Concat operator
# $a ||| $b
#   if $a is instance of number or is TEXT: concat as text value: "$a$b"
#   if $a and $b are ARRAYs: Concat arrays: [$a..., $b...]
#   if $a and $b are FUNCTION_POINTERs: Concat function pointers: FP: (&args...) -> $b($a(&args...))
#   otherwise: Not defined
func.println()
func.println(parser.op(1 ||| test))
func.println(parser.op(1 ||| 42))
func.println(parser.op(1 ||| [1,2]))
func.println(parser.op(long(2) ||| test))
func.println(parser.op(2.0 ||| test))
func.println(parser.op(double(2.0) ||| test))
func.println(parser.op(text1 ||| test))
func.println(---)
func.println(parser.op([1,2] ||| []))
func.println(parser.op([1,2] ||| [3]))
func.println(parser.op([] ||| [1,2,3]))
func.println(parser.op([1,2] ||| 1)) # Exception
func.println(parser.op([1,2] ||| test)) # Exception

# Spaceship operator
# $a <=> $b:
#   if $a < $b:  -1
#   if $a == $b:  0
#   if $a > $b:   1
#   if $a not comparable to $b (= every previous check returned false): null
func.println()
func.println(parser.op(1 <=> 1)) # 0
func.println(parser.op(1 <=> 2)) # -1
func.println(parser.op(2 <=> 1)) # 1
func.println(parser.op(null <=> 1)) # null
func.println(parser.op(null <=> null)) # 0
func.println(parser.op(1 <=> null)) # null

# Elvis operator
# Will be evaulate to the first operand if it evaluates to true else it will be evalute the second operand
func.println()
func.println(parser.op(1 ?: 42)) # 1
func.println(parser.op(0 ?: 42)) # 42
func.println(parser.op(\0 ?: 42)) # 42
func.println(parser.op(\? ?: 42)) # ?
func.println(parser.op(abc ?: 42)) # abc
func.println(parser.op(\e ?: 42)) # 42
func.println(parser.op(func.arrayOf() ?: 42)) # 42
func.println(parser.op(func.arrayOf(1, abc) ?: 42)) # [1, abc]
func.println(parser.op(null ?: 42)) # 42
func.println(parser.op(func.print(\e) ?: 42)) # 42 (func.print(\e) will return a void value)

# Null coalescing operator
# Will be evaulate to the first operand if it is not null and not void else it will be evalute the second operand
func.println()
func.println(parser.op(1 ?? 42)) # 1
func.println(parser.op(0 ?? 42)) # 0
func.println(parser.op(\0 ?? 42)) # \0
func.println(parser.op(\? ?? 42)) # ?
func.println(parser.op(abc ?? 42)) # abc
func.println(parser.op(\e ?? 42)) # \e
func.println(parser.op(func.arrayOf() ?? 42)) # []
func.println(parser.op(func.arrayOf(1, abc) ?? 42)) # [1, abc]
func.println(parser.op(null ?? 42)) # 42
func.println(parser.op(func.print(\e) ?? 42)) # 42 func.print(\e) will return a void value

# Inline if operator
# Will be evaulate to the second operand if the first operand evaluates to true else it will be evalute the thrid operand
func.println()
func.println(parser.op(1 ? TRUE : FALSE)) # TRUE
func.println(parser.op(0 ? TRUE : FALSE)) # FALSE
func.println(parser.op(\0 ? TRUE : FALSE)) # FALSE
func.println(parser.op(\? ? TRUE : FALSE)) # TRUE
func.println(parser.op(abc ? TRUE : FALSE)) # TRUE
func.println(parser.op(\e ? TRUE : FALSE)) # FALSE
func.println(parser.op(func.arrayOf() ? TRUE : FALSE)) # FALSE
func.println(parser.op(func.arrayOf(1, abc) ? TRUE : FALSE)) # TRUE
func.println(parser.op(null ? TRUE : FALSE)) # FALSE
func.println(parser.op(func.print(\e) ? TRUE : FALSE)) # FALSE func.print(\e) will return a void value

func.println()

# Assignment operators
# Normal assignment
$a = 42
func.println($a)

func.println()

# Lvalue operation assignment
$arr $= [1, 2, 3]
$arr[0] ::= test-abc # Will set $arr[0] to a text value
# $arr[0] = test-abc # Would be parsed as a translation
# $arr[0] $= test-abc # Would throw an error ("-" is not defined for TEXT and TEXT)
func.println($arr)

func.println()

# Condition operator assignment
$test ?= 1 || 0
func.println($test)

$test ?= 1 && 0
func.println($test)

$test ?= 1 ~~ $LANG_TYPE_INT
func.println($test)

$test ?= 1 ~~ $LANG_TYPE_TEXT
func.println($test)

$test ?= 1\e ~~ $LANG_TYPE_TEXT
func.println($test)

func.println()

# Math operator assignment
$test := 2 + 3
func.println($test)

$test := 2 ** 3
func.println($test)

$test := 10 ~/ 4
func.println($test)

$test := -10 ~/ 4
func.println($test)

func.println()

# Operation operator assignment
$test $= func.rand() % 11 ?: 42 # Rvalue will be parsed as operation expression "parser.op()"
func.println($test)

$test $= 1 && 0 || 1 - 1 ?: 30
func.println($test)

$test $= (func.randChoice(null, 0, 1, 2, abc) ?? text-) + 30
func.println($test)

func.println()

$test $= 0 ?: null ?: 0.0
func.println($test) # 0.0
$test $= 0 ?: null ?: 3
func.println($test) # 3
$test $= 0 ?: 2 ?: 0.0
func.println($test) # 2
$test $= 0 ?: 2 ?: 3
func.println($test) # 2
$test $= 1 ?: null ?: 0.0
func.println($test) # 1
$test $= 1 ?: null ?: 3
func.println($test) # 1
$test $= 1 ?: 2 ?: 0.0
func.println($test) # 1
$test $= 1 ?: 2 ?: 3
func.println($test) # 1

func.println()

$a $= 42 - 20 * 2
func.println($a)

# Math assignments (Rvalue will be parsed as math expression "parser.op()")
$a += (40 - 23) // 2 # Addition assignment
func.println($a)

$a -= 2 # Subtract assignment
func.println($a)

$a *= 3 + 1 # Multiplication assignment
func.println($a)

$a /= 3 # Division assignment
func.println($a)

$a //= 3 # Floor division assignment
func.println($a)

$a **= 8 # Power assignment
func.println($a)

$a = func.int($a) # Convert $a to INT

$a %= 250 # Modulo assignment
func.println($a)

$a >>= 2 # Right shift assignment
func.println($a)

$a >>>= 1 # Right zero shift assignment
func.println($a)

$a <<= 1 # Left shift assignment
func.println($a)

$a &= 250 # Bitwise and assignment
func.println($a)

$a |= 15 # Bitwise or assignment
func.println($a)

$a ^= 43 # Bitwise xor assignment
func.println($a)

func.println()

$a = text
$a |||= -42 # Concat assignment operator
func.println($a)

&a $= [1, 2, 3]
&a |||= [4, 5]
func.println(&a) # [1, 2, 3, 4, 5]

func.println()

# Evaluation order
# Function pointer is only for output, Function pointers: See [06_functionPointer.lang]
fp.printAndRet = ($name, $num) -> {
	func.println(Evaluation: $num ($name))
	
	return $num
}

# Left-to-right vs right-to-left operators with 1 operator
func.println()
func.println(15 / 3:)
func.println(Output: parser.op(printAndRet(l, 15) / printAndRet(r, 3)))
func.println()
func.println(15 ** 3:)
func.println(Output: parser.op(printAndRet(l, 15) ** printAndRet(r, 3)))
func.println()

# Left-to-right vs right-to-left operators with 2 operators
func.println()
func.println(10 / 5 / 2:)
func.println(Output: parser.op(printAndRet(l, 10) / printAndRet(m, 5) / printAndRet(r, 2)))
func.println()
func.println(10 / (5 / 2):)
func.println(Output: parser.op(printAndRet(l, 10) / (printAndRet(m, 5) / printAndRet(r, 2))))
func.println()
func.println(10 ** 5 ** 2:)
func.println(Output: parser.op(printAndRet(l, 10) ** printAndRet(m, 5) ** printAndRet(r, 2)))
func.println()
func.println((10 ** 5) ** 2:)
func.println(Output: parser.op((printAndRet(l, 10) ** printAndRet(m, 5)) ** printAndRet(r, 2)))
func.println()

# Conditional vs bitwise AND/OR
func.println()
func.println(1 || 0:)
func.println(Output: parser.op(printAndRet(l, 1) || printAndRet(r, 0)))
func.println()
func.println(0 || 1:)
func.println(Output: parser.op(printAndRet(l, 0) || printAndRet(r, 1)))
func.println()
func.println(1 && 0:)
func.println(Output: parser.op(printAndRet(l, 1) && printAndRet(r, 0)))
func.println()
func.println(0 && 1:)
func.println(Output: parser.op(printAndRet(l, 0) && printAndRet(r, 1)))
func.println()
func.println(1 | 0:)
func.println(Output: parser.op(printAndRet(l, 1) | printAndRet(r, 0)))
func.println()
func.println(0 | 1:)
func.println(Output: parser.op(printAndRet(l, 0) | printAndRet(r, 1)))
func.println()
func.println(1 & 0:)
func.println(Output: parser.op(printAndRet(l, 1) & printAndRet(r, 0)))
func.println()
func.println(0 & 1:)
func.println(Output: parser.op(printAndRet(l, 0) & printAndRet(r, 1)))
func.println()

# Null coalescing and elvis and inline if
func.println()
func.println(abc ?? r:)
func.println(Output: parser.op(printAndRet(l, abc) ?? printAndRet(r, r)))
func.println()
func.println(0 ?? r:)
func.println(Output: parser.op(printAndRet(l, 0) ?? printAndRet(r, r)))
func.println()
func.println(null ?? r:)
func.println(Output: parser.op(printAndRet(l, null) ?? printAndRet(r, r)))
func.println()
func.println(abc ?: r:)
func.println(Output: parser.op(printAndRet(l, abc) ?: printAndRet(r, r)))
func.println()
func.println(0 ?: r:)
func.println(Output: parser.op(printAndRet(l, 0) ?: printAndRet(r, r)))
func.println()
func.println(null ?: r:)
func.println(Output: parser.op(printAndRet(l, null) ?: printAndRet(r, r)))
func.println()
func.println(abc ? m : r:)
func.println(Output: parser.op(printAndRet(l, abc) ? printAndRet(m, m) : printAndRet(r, r)))
func.println()
func.println(0 ? m : r:)
func.println(Output: parser.op(printAndRet(l, 0) ? printAndRet(m, m) : printAndRet(r, r)))
func.println()
func.println(null ? m : r:)
func.println(Output: parser.op(printAndRet(l, null) ? printAndRet(m, m) : printAndRet(r, r)))

func.println()

# Operators with non number types
# - (unary) for TEXT and ARRAY values
# Will reverse the text/array value
func.println(-\e = parser.op(-\e))
func.println(-a\e = parser.op(-a\e))
func.println(-ABC = parser.op(-ABC))

func.println()

&a = func.arrayOf(42, abc, test, null, 14)
func.println(-func.arrayOf() = parser.op(-func.arrayOf()))
func.println(-func.arrayOf(abc) = parser.op(-func.arrayOf(abc)))
func.println(-&a = parser.op(-&a))

func.println()

# + (binary) for TEXT and ARRAY values
# Will append something to the text/array value
func.println(\e+\e = parser.op(\e+\e))
func.println(test+\e = parser.op(test+\e))
func.println(\e+test = parser.op(\e+test))
func.println(test+test = parser.op(test+test))

func.println()

func.println(\e+42 = parser.op(\e+42))
func.println(\e+\s = parser.op(\e+\s))
func.println(\e+func.arrayOf(1, 2, a) = parser.op(\e+func.arrayOf(1, 2, a)))
func.println(test+42 = parser.op(test+42))
func.println(test+\s = parser.op(test+\s))
func.println(test+func.arrayOf(1, 2, a) = parser.op(test+func.arrayOf(1, 2, a)))

func.println()

# ARRAY + ARRAY: The second array will be added as one element in the first array
&a = func.arrayOf(42, abc, null, test)
&e = func.arrayCreate(0)
func.println(&e+&e = parser.op(&e+&e))
func.println(&a+&e = parser.op(&a+&e))
func.println(&e+&a = parser.op(&e+&a))
func.println(&a+&a = parser.op(&a+&a))

func.println()

func.println(&e+42 = parser.op(&e+42))
func.println(&e+\s = parser.op(&e+\s))
func.println(&e+test = parser.op(&e+test))
func.println(&a+42 = parser.op(&a+42))
func.println(&a+\s = parser.op(&a+\s))
func.println(&a+test = parser.op(&a+test))

func.println()

# * (binary) for TEXT values
# Will repeat the text 0 or more times

func.println(\e*0 = parser.op(\e*0))
func.println(\e*1 = parser.op(\e*1))
func.println(\e*2 = parser.op(\e*2))
func.println(\e*3 = parser.op(\e*3))
func.println(test*0 = parser.op(test*0))
func.println(test*1 = parser.op(test*1))
func.println(test*2 = parser.op(test*2))
func.println(test*3 = parser.op(test*3))
