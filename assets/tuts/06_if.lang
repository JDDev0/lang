lang.name = If Statement
lang.version = v1.0.0

# If statement:
# con.if("condition") # (Can be used only once)
#     ... # Will be executed if condition is true (!= 0) else
#         # it skips to the next block
# con.elif("condition") # Optional (Can be used more than once)
#     ... # Will be executed if condtion is true
# con.else # Optional (Can be used only once)
#     ... #Will be executed if none of the above conditions is true
# con.endif # End of if statement
$var = 42
con.if($var)
	func.println($var => True)
con.else
	func.println($var => False)
con.endif

func.println(-----------------)

$var = 0
con.if($var)
	func.println($var => True)
con.else
	func.println($var => False)
con.endif

func.println(-----------------)

$var = -1
con.if($var)
	func.println($var => True)
con.else
	func.println($var => False)
con.endif

func.println(-----------------)

fp.testElif = ($varA, $varB, $varC) -> {
	func.println(Testing: $varA, $varB, $varC)
	func.println(1st)
	con.if($varA)
		func.println(\$varA => True)
	con.endif
	con.if($varB)
		func.println(\$varB => True)
	con.endif
	con.if($varC)
		func.println(\$varC => True)
	con.else
		func.println(No var is True)
	con.endif
	
	func.println(-----------------)
	
	func.println(2nd)
	con.if($varA)
		func.println(\$varA => True)
	con.elif($varB)
		func.println(\$varB => True)
	con.elif($varC)
		func.println(\$varC => True)
	con.else
		func.println(No var is True)
	con.endif
	
	func.println(-----------------)
}
fp.testElif(0, 0, 0)
fp.testElif(0, 0, 1)
fp.testElif(0, 1, 0)
fp.testElif(0, 1, 1)
fp.testElif(1, 0, 0)
fp.testElif(1, 0, 1)
fp.testElif(1, 1, 0)
fp.testElif(1, 1, 1)

func.println(-----------------)

# If statetment inside if statement
# con.if("condition")
#     con.if("condition")
#         ...
#     con.else
#         ...
#     con.endif
# con.else
#     ...
# con.endif

$var1 = 42
$var2 = 0
con.if($var1)
	con.if($var2)
		func.println(\$var1 and \$var2)
	con.else
		func.println(\$var1 only)
	con.endif
con.else
	func.println(not \$var1)
con.endif

func.println(-----------------)

$var1 = 42
$var2 = 12
con.if($var1)
	con.if($var2)
		func.println(\$var1 and \$var2)
	con.else
		func.println(\$var1 only)
	con.endif
con.else
	func.println(not \$var1)
con.endif

func.println(-----------------)

$var1 = 0
$var2 = 12
con.if($var1)
	con.if($var2)
		func.println(\$var1 and \$var2)
	con.else
		func.println(\$var1 only)
	con.endif
con.else
	func.println(not \$var1)
con.endif

func.println(-----------------)

# Condition function
# con.condition("condition") # Will return 1 if true else 0
func.println(con.condition(0))
func.println(con.condition(-1))
func.println(con.condition(42))
func.println(con.condition(1))

func.println(-----------------)

# Operators
#     For all types:
#         "==":  Equals
#         "!=":  Not equals
#         "===": Strict equals
#         "!==": Not Strict equals
#         "<":   Less than
#         ">":   Greater than
#         "<=":  Less than or equals
#         ">=":  Greater than or equals
#     For condition combination:
#         "!":  Not
#         "&&": And
#         "||": Or
#         "()": Execute as an unit
func.println(a compared to a)
func.println(con.condition(a == a))
func.println(con.condition(a != a))

func.println(-----------------)

func.println(a compared to d)
func.println(con.condition(a == d))
func.println(con.condition(a != d))

func.println(-----------------)

func.println(abc compared to abc)
func.println(con.condition(abc == abc))
func.println(con.condition(abc != abc))

func.println(-----------------)

func.println(abc compared to def)
func.println(con.condition(abc == def))
func.println(con.condition(abc != def))

func.println(-----------------)

func.println(equals vs strict equals (Strict equals will checks if the data types are equals and the value are equals))
func.println(con.condition(1 == 1.))
func.println(con.condition(1 != 1.))
func.println(con.condition(1 === 1.))
func.println(con.condition(1 !== 1.))

func.println(-----------------)

func.println(0 compared to 5)
func.println(con.condition(0 == 5))
func.println(con.condition(0 != 5))
func.println(con.condition(0 < 5))
func.println(con.condition(0 > 5))
func.println(con.condition(0 <= 5))
func.println(con.condition(0 >= 5))

func.println(-----------------)

func.println(5 compared to 5)
func.println(con.condition(5 == 5))
func.println(con.condition(5 != 5))
func.println(con.condition(5 < 5))
func.println(con.condition(5 > 5))
func.println(con.condition(5 <= 5))
func.println(con.condition(5 >= 5))

func.println(-----------------)

func.println(5 == 5 == 5:    con.condition(5 == 5 == 5))
func.println(5 == 5 == 1:    con.condition(5 == 5 == 1))
func.println(1 == 5 == 5:    con.condition(1 == 5 == 5))
func.println((5 == 5) == 5:  con.condition((5 == 5) == 5))
func.println((5 == 5) == 1:  con.condition((5 == 5) == 1))
func.println(5 == (5 == 5):  con.condition(5 == (5 == 5)))
func.println(5 == (5 == 1):  con.condition(5 == (5 == 1)))
func.println(5 == (5 == 5):  con.condition(5 == (5 == 5)))
func.println(1 == (5 == 5):  con.condition(1 == (5 == 5)))

func.println(-----------------)

func.println(con.condition(1 || (1 && 0))) #1
func.println(con.condition(1 || 1 && 0)) #1
func.println(con.condition((1 || 1) && 0)) #0

func.println(-----------------)

func.println(con.condition(1 && (0 || 1))) #1
func.println(con.condition(1 && 0 || 1)) #1
func.println(con.condition((1 && 0) || 1)) #1

func.println(-----------------)

func.println(con.condition(0 && (1 || 0))) #0
func.println(con.condition(0 && 1 || 0)) #0
func.println(con.condition((0 && 1) || 0)) #0

func.println(-----------------)

func.println(con.condition(0 && (0 || 1))) #0
func.println(con.condition(0 && 0 || 1)) #0
func.println(con.condition((0 && 0) || 1)) #1

func.println(-----------------)

func.println(con.condition(!(0 && (0 || 1)))) #1
func.println(con.condition(!(0 && 0 || 1))) #1
func.println(con.condition(!((0 && 0) || 1))) #0

func.println(-----------------)

func.println(con.condition(!0 && (0 || 1))) #1
func.println(con.condition(!0 && 0 || 1)) #1
func.println(con.condition(!(0 && 0) || 1)) #0

func.println(-----------------)

func.println(con.condition((!0) && (0 || 1))) #1
func.println(con.condition((!0 && 0) || 1)) #1
func.println(con.condition((!(0 && 0)) || 1)) #1

func.println(-----------------)

# Check for null values
$var = Not null
$var2 = null
$var3 = nul\!l
$var4

func.println($var  -> con.condition($var === null)) #0
func.println($var2 -> con.condition($var2 === null)) #1
func.println($var3 -> con.condition($var3 === null)) #0
func.println($var4 -> con.condition($var4 === null)) #1

func.println(-----------------)

# Advanced conditions
{
	# Check the length of an array
	&arr = func.arrayMake(3)
	
	func.println(Check with normal equals)
	func.println(con.condition(&arr == 3))
	func.println(con.condition(3 == &arr))
	func.println(con.condition(&arr == 2))
	func.println(con.condition(2 == &arr))
	
	func.println(-----------------)
	
	func.println(Check with strict equals)
	func.println(con.condition(&arr === 3))
	func.println(con.condition(3 === &arr))
	func.println(con.condition(&arr === 2))
	func.println(con.condition(2 === &arr))
	
	func.println(-----------------)
	
	# Check the exact error of $LANG_ERRNO
	func.divd(1, 0) # Set error to "div by zero"
	
	func.println(Check with normal equals with \$LANG_ERRNO_...)
	func.println(con.condition($LANG_ERRNO == $LANG_ERRNO_DIV_BY_ZERO))
	func.println(con.condition($LANG_ERRNO_DIV_BY_ZERO == $LANG_ERRNO))
	func.println(con.condition($LANG_ERRNO == $LANG_ERRNO_INVALID_ARGUMENTS))
	func.println(con.condition($LANG_ERRNO_INVALID_ARGUMENTS == $LANG_ERRNO))
	
	func.println(-----------------)
	
	func.println(Check with normal equals with \$LANG_ERROR_...)
	func.println(con.condition($LANG_ERRNO == $LANG_ERROR_DIV_BY_ZERO))
	func.println(con.condition($LANG_ERROR_DIV_BY_ZERO == $LANG_ERRNO))
	func.println(con.condition($LANG_ERRNO == $LANG_ERROR_INVALID_ARGUMENTS))
	func.println(con.condition($LANG_ERROR_INVALID_ARGUMENTS == $LANG_ERRNO))
	
	func.println(-----------------)
	
	func.println(Check with strict equals with \$LANG_ERRNO_...)
	func.println(con.condition($LANG_ERRNO === $LANG_ERRNO_DIV_BY_ZERO))
	func.println(con.condition($LANG_ERRNO_DIV_BY_ZERO === $LANG_ERRNO))
	func.println(con.condition($LANG_ERRNO === $LANG_ERRNO_INVALID_ARGUMENTS))
	func.println(con.condition($LANG_ERRNO_INVALID_ARGUMENTS === $LANG_ERRNO))
	
	func.println(-----------------)
	
	func.println(Check with strict equals with \$LANG_ERROR_...)
	func.println(con.condition($LANG_ERRNO === $LANG_ERROR_DIV_BY_ZERO))
	func.println(con.condition($LANG_ERROR_DIV_BY_ZERO === $LANG_ERRNO))
	func.println(con.condition($LANG_ERRNO === $LANG_ERROR_INVALID_ARGUMENTS))
	func.println(con.condition($LANG_ERROR_INVALID_ARGUMENTS === $LANG_ERRNO))
	
	func.println(-----------------)
	
	# Check the exact error of a returned error object
	$err = func.divd(1, 0) # Will return "div by zero" error object
	
	func.println(Check with normal equals with \$LANG_ERRNO_...)
	func.println(con.condition($err == $LANG_ERRNO_DIV_BY_ZERO))
	func.println(con.condition($LANG_ERRNO_DIV_BY_ZERO == $err))
	func.println(con.condition($err == $LANG_ERRNO_INVALID_ARGUMENTS))
	func.println(con.condition($LANG_ERRNO_INVALID_ARGUMENTS == $err))
	
	func.println(-----------------)
	
	func.println(Check with normal equals with \$LANG_ERROR_...)
	func.println(con.condition($err == $LANG_ERROR_DIV_BY_ZERO))
	func.println(con.condition($LANG_ERROR_DIV_BY_ZERO == $err))
	func.println(con.condition($err == $LANG_ERROR_INVALID_ARGUMENTS))
	func.println(con.condition($LANG_ERROR_INVALID_ARGUMENTS == $err))
	
	func.println(-----------------)
	
	func.println(Check with strict equals with \$LANG_ERRNO_...)
	func.println(con.condition($err === $LANG_ERRNO_DIV_BY_ZERO))
	func.println(con.condition($LANG_ERRNO_DIV_BY_ZERO === $err))
	func.println(con.condition($err === $LANG_ERRNO_INVALID_ARGUMENTS))
	func.println(con.condition($LANG_ERRNO_INVALID_ARGUMENTS === $err))
	
	func.println(-----------------)
	
	func.println(Check with strict equals with \$LANG_ERROR_...)
	func.println(con.condition($err === $LANG_ERROR_DIV_BY_ZERO))
	func.println(con.condition($LANG_ERROR_DIV_BY_ZERO === $err))
	func.println(con.condition($err === $LANG_ERROR_INVALID_ARGUMENTS))
	func.println(con.condition($LANG_ERROR_INVALID_ARGUMENTS === $err))
}
