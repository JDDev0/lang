# "Lang data" translations
lang.name = Translations
lang.version = v1.0.0

# Lang Translations: translationKey = translationValue
ui.ok = Ok
ui.cancel = Cancel
ui.exit = Exit

# Translation key with leading "$"
\$test = TEST
{{{$test2}}} = TEST2

# Translation key wich is the value of a variable
$test = trans.test.key # [See: 02_vars.lang]
%$test = TEST3

# "%$" can be dropped if translation key is not only the value of a variable
$test.abc = TEST4

# Get a translation value: func.getTranslationValue(translationKey)
func.println(func.getTranslationValue(ui.ok))
func.println(func.getTranslationValue(\$test)) # "\$": Escaped "$"
func.println(func.getTranslationValue(\$test2))

ui.test = func.getTranslationValue(\$test)

# Escape chars
esc.zero = \0 # NUL (Null character)
esc.new_line = \n # LF (Line feed)
esc.cr = \r # CR (Carriage return)
esc.ff = \f # FF (Form feed)
esc.space = \s # " " (Space)
esc.empty = \e # empty text = text of length 0
esc.bs = \b # BS (Backspace)
esc.ht = \t # HT (Horizontal tab)
esc.dol = \$ # "$"
esc.amp = \& # "&"
esc.comment = \# # "#"
esc.com = \, # ","
esc.ob = \( # "("
esc.cb = \) # ")"
esc.ob.2 = \{ # "{"
esc.cb.2 = \} # "}"
esc.eq = \= # "="
esc.lt = \< # "<"
esc.gt = \> # ">"
esc.fns = \! # Force node split (Will force the parse to split the current node)
esc.backslash = \\ # "\"

# Empty translation
empty.nothing =

# Simple translations
# translationKey=translationValue
# The translation key can only contain alpanumeric (a-z, A-Z, 0-9), _, -, ., and : characters
# Only escape sequences and text values are parsed in the translation value
simple.trans.1=test
simple.trans.2=$test
simple.trans.3=func.getTranslationValue(ui.ok) # The function will not be executed and is saved as text
simple.trans.4=This is a multiline\nTranslation!
simple.trans.5=\\\s\\ # "\ \"
simple.fns=\!

# Empty simple translation
simple.empty.nothing=
