lang.name = Error Handling
lang.version = v1.0.0

# Print Error function
# func.printError([Text]) # Prints the acutal error
#                           Will reset $LANG_ERRNO to 0
func.printError()
func.printError(Error)

# Error String function
# func.getErrorText(void) # Returns the actual error string
#                           Will reset $LANG_ERRNO to 0
func.println(Error String: func.getErrorText())

# Actual Error code
# $LANG_ERRNO # Error code number
func.println(Error code: $LANG_ERRNO)

# Error codes (v1.0.0):
#    No error
#         0: NO_ERROR
#    Variable Set error
#         1: FINAL_VAR_CHANGE
#    Linking errors
#         2: TO_MANY_INNER_LINKS
#         3: NO_LANG_FILE
#         4: FILE_NOT_FOUND
#    Function Pointer errors
#         5: INVALID_FUNC_PTR
#    System errors
#         6: STACK_OVERFLOW
#         7: NO_TERMINAL
#    Function errors
#         8: INVALID_ARG_COUNT
#         9: INVALID_LOG_LEVEL
#    Array errors:
#        10: INVALID_ARR_PTR
#    Number errors:
#        11: NO_HEX_NUM
#        12: NO_CHAR
#        13: NO_NUM
#        14: DIV_BY_ZERO
#    Array errors:
#        15: NEGATIVE_ARRAY_LEN
#        16: EMPTY_ARRAY
#        17: LENGTH_NAN
#        18: INDEX_OUT_OF_BOUNDS
#        19: ARG_COUNT_NOT_ARR_LEN
#    Loop function errors:
#        20: INVALID_FUNC_PTR_LOOP
#    Function errors:
#        21: INVALID_ARGUMENTS
#        22: FUNCTION_NOT_FOUND
#        23: EOF
#    System errors:
#        24: SYSTEM_ERROR
#    Loop function errors:
#        25: NEGATIVE_REPEAT_COUNT
#    Function errors:
#        26: TRANS_KEY_NOT_FOUND
#        27: FUNCTION_NOT_SUPPORTED
#        28: BRACKET_MISMATCH
#    Control flow statement errors:
#        29: CONT_FLOW_ARG_MISSING
#    Parsing errors:
#        30: INVALID_AST_NODE
#    Function errors:
#        31: INVALID_PTR
#    Variable errors:
#        32: INCOMPATIBLE_DATA_TYPE
#        33: LANG_ARRAYS_COPY
#    Lang errors:
#        34: LANG_VER_ERROR
#    Control flow statement errors:
#        35: INVALID_CON_PART
#    Format errors:
#        36: INVALID_FORMAT
#    Variable errors:
#        37: INVALID_ASSIGNMENT
#    Number errors:
#        38: NO_BIN_NUM
#        39: NO_OCT_NUM
#        40: NO_BASE_N_NUM
#        41: INVALID_NUMBER_BASE
#    RegEx errors:
#        42: INVALID_REGEX_SYNTAX
#    Format errors:
#        43: INVALID_TEMPLATE_SYNTAX
#    Module errors:
#        44: INVALID_MODULE
#        45: MODULE_LOAD_UNLOAD_ERR
#
# Warning codes (v1.0.0):
#    Predefined function warnings:
#        -1: DEPRECATED_FUNC_CALL
#    System warnings:
#        -2: NO_TERMINAL_WARNING
#    Lang warnings:
#        -3: LANG_VER_WARNING
#        -4: INVALID_EXEC_FLAG_DATA
#    Variable warnings:
#        -5: VAR_SHADOWING_WARNING
#    Value warnings:
#        -6: UNDEF_ESCAPE_SEQUENCE

# Error Handling example
$value = func.divi(42, 0)
if($LANG_ERRNO != 0) { # "if($LANG_ERRNO)" would also be possible
	func.printError(An error occurred)
	func.printError($LANG_ERRNO was reseted) # Will print "No Error"
}else {
	# Do something
}

func.println()

func.arrayMake(&a, -1)
if($LANG_ERRNO) {
	$errCode = $LANG_ERRNO
	func.printTerminal(5, An error occurred: func.getErrorText() [Code: $errCode])
}else {
	# Do something
}

func.println()

func.arraySetAll(&a, 10, 32, 42)
if($LANG_ERRNO) {
	$errCode = $LANG_ERRNO
	func.printTerminal(5, An error occurred: func.getErrorText() [Code: $errCode])
}else {
	# Do something
}

$LANG_VER = 42
if($LANG_ERRNO) {
	$errCode = $LANG_ERRNO
	func.printTerminal(5, An error occurred: func.getErrorText() [Code: $errCode])
}else {
	# Do something
}

fp.test(Test1)
if($LANG_ERRNO) {
	$errCode = $LANG_ERRNO
	func.printTerminal(5, An error occurred: func.getErrorText() [Code: $errCode])
}else {
	# Do something
}

func.repeat(fp.test, 42)
if($LANG_ERRNO) {
	$errCode = $LANG_ERRNO
	func.printTerminal(5, An error occurred: func.getErrorText() [Code: $errCode])
}else {
	# Do something
}

func.repeat(fp.abc)
if($LANG_ERRNO) {
	$errCode = $LANG_ERRNO
	func.printTerminal(5, An error occurred: func.getErrorText() [Code: $errCode])
}else {
	# Do something
}

func.printTerminal(-1, ((Test))
if($LANG_ERRNO) {
	$errCode = $LANG_ERRNO
	func.printTerminal(5, An error occurred: func.getErrorText() [Code: $errCode])
}else {
	# Do something
}

$value = func.hexToDec(0xG42)
if($LANG_ERRNO) {
	$errCode = $LANG_ERRNO
	func.printTerminal(5, An error occurred: func.getErrorText() [Code: $errCode])
}else {
	# Do something
}

# Check exact error of $LANG_ERRNO
func.getErrorText() # Reset $LANG_ERRNO

$ret = func.divd(1, 0)
if($LANG_ERRNO === $LANG_ERRNO_DIV_BY_ZERO) { # $LANG_ERRNO should be checked with strict equals and $LANG_ERRNO_...
	func.printTerminal(5, Div by zero error)
}elif($LANG_ERRNO) {
	func.printTerminal(5, Some error occurred [Code: $LANG_ERRNO])
}else {
	func.printTerminal(1, $ret)
}

func.getErrorText() # Reset $LANG_ERRNO

$ret = func.divd(1, abc)
if($LANG_ERRNO === $LANG_ERRNO_DIV_BY_ZERO) {
	func.printTerminal(5, Div by zero error)
}elif($LANG_ERRNO) {
	func.printTerminal(5, Some error occurred [Code: $LANG_ERRNO])
}else {
	func.printTerminal(1, $ret)
}

func.getErrorText() # Reset $LANG_ERRNO

$ret = func.divd(1, 3)
if($LANG_ERRNO === $LANG_ERRNO_DIV_BY_ZERO) {
	func.printTerminal(5, Div by zero error)
}elif($LANG_ERRNO) {
	func.printTerminal(5, Some error occurred [Code: $LANG_ERRNO])
}else {
	func.printTerminal(1, $ret)
}

# Check errors from functions
func.getErrorText() # Reset $LANG_ERRNO

$ret = func.divi(2, 0)
if($ret === $LANG_ERROR_DIV_BY_ZERO) { # Function errors should be checked with strict equals and $LANG_ERROR_...
	func.printTerminal(5, Div by zero error)
}elif($LANG_ERRNO) {
	func.printTerminal(5, Some error occurred [Code: $LANG_ERRNO])
}else {
	func.printTerminal(1, $ret)
}

func.getErrorText() # Reset $LANG_ERRNO

$ret = func.divi(2, abc)
if($ret === $LANG_ERROR_DIV_BY_ZERO) {
	func.printTerminal(5, Div by zero error)
}elif($LANG_ERRNO) {
	func.printTerminal(5, Some error occurred [Code: $LANG_ERRNO])
}else {
	func.printTerminal(1, $ret)
}

func.getErrorText() # Reset $LANG_ERRNO

$ret = func.divi(2, 3)
if($ret === $LANG_ERROR_DIV_BY_ZERO) {
	func.printTerminal(5, Div by zero error)
}elif($LANG_ERRNO) {
	func.printTerminal(5, Some error occurred [Code: $LANG_ERRNO])
}else {
	func.printTerminal(1, $ret)
}

func.getErrorText() # Reset $LANG_ERRNO

fp.a = ($i) -> {
	if(!$i) {
		# The throw statement will return the error object and will set $LANG_ERRNO
		throw $LANG_ERROR_INVALID_ARGUMENTS # $LANG_ERROR_... or a data object of type ERROR must be used for throwing error
	}elif($i === abc) {
		throw $LANG_ERROR_NO_NUM
	}
	
	return func.addi($i, 1)
}

$ret = fp.a(0)
func.printError()

func.getErrorText() # Reset $LANG_ERRNO

$ret = fp.a(abc)
func.printError()

func.getErrorText() # Reset $LANG_ERRNO

$ret = fp.a(1)
func.printError()

func.getErrorText() # Reset $LANG_ERRNO

# Forward thrown errors
fp.testError = ($a, $b) -> {
	$ret = func.divd($a, $b)
	con.if($LANG_ERRNO != 0)
		throw $ret
	con.endif
	
	return $ret
}

$ret = fp.testError(0, 0)
if($LANG_ERRNO != 0) {
	func.printError()
}else {
	func.printTerminal(1, Result: $ret)
}

$ret = fp.testError(0, 1)
if($LANG_ERRNO != 0) {
	func.printError()
}else {
	func.printTerminal(1, Result: $ret)
}

$ret = fp.testError(text, 1)
if($LANG_ERRNO != 0) {
	func.printError()
}else {
	func.printTerminal(1, Result: $ret)
}

$ret = fp.testError(text, text)
if($LANG_ERRNO != 0) {
	func.printError()
}else {
	func.printTerminal(1, Result: $ret)
}

# Get the error text from an error value
# func.errorText(ERROR)
func.println(func.errorText($LANG_ERROR_INVALID_ARGUMENTS))

# Get the error code from an error value
# func.errorCode(ERROR)
func.println(func.errorCode($LANG_ERROR_INVALID_ARGUMENTS))

# End the program early & throw error
func.println(Will be executed)
throw $LANG_ERROR_EOF # A throw statement outside of a function pointer function body will end the program execution early
func.println(Won't be executed)
