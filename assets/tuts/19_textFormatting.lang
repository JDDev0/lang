lang.name = Text Formatting
lang.version = v1.0.0

# Formatting functions
# func.format(FORMAT, VARARGS) # Returns a TEXT value
# func.printf(FORMAT, VARARGS) # Will print the formatted text to standard out without line ending
# func.errorf(FORMAT, VARARGS) # Will print the formatted text to standard err without line ending

# FORMAT:
# - Format specifier:
#   - %% # % sign
#   - %d # Integer number
#   - %b # Binary integer number
#   - %o # Octal integer number
#   - %x # Hex integer number
#   - %f # Floating point number
#   - %c # CHAR value (An INT value will be converted)
#   - %s # TEXT value
#   - %t # Translation value of a translation key
#   - %? # Boolean value (Will print "true" for truthy values and "false" for falsy values)
#   - %n # Platform independent newline sequence (Should be used instead of \n, because "\n" will only print a line feed whereas "%n" will print the correct line termination sequence for every OS)
# - Format arguments:
#   - %[<index>]   # For: d, b, o, x, f, c, s, t, ? # Value at specific argument index (0th index is the format text)
#   - %<num>       # For: d, b, o, x, f, c, s, t, ? # Size [Padding with spaces]
#   - %-<num>      # For: d, b, o, x, f, c, s, t, ? # Size [left-justify]
#   - %0<num>      # For: d, b, o, x, f             # Size [Padding with 0s]
#   - %+           # For: d, b, o, x, f             # Force sign
#   - %␣           # For: d, b, o, x, f             # Space sign [Will print a space if no sign is in front of the number]
#   - %*           # For: d, b, o, x, f, c, s, t, ? # Size from varargs
#   - %*[<index>]  # For: d, b, o, x, f, c, s, t, ? # Size from varargs at a specific argument index (0th index is the format text)
#   - %.<num>      # For:             f             # Decimal places (Rounded)
#   - %.<num>      # For:                      t    # Count (For pluralization template translation)
#   - %.*          # For:             f             # Decimal places from varargs (Rounded)
#   - %.*          # For:                      t    # Count from varargs (For pluralization template translation)
#   - %.*[<index>] # For:             f             # Decimal places from varargs at a specific argument index (0th index is the format text) (Rounded)
#   - %.*[<index>] # For:                      t    # Count from varargs at a specific argument index (0th index is the format text) (For pluralization template translation)
# - Format argument incompabilities:
#   - "-" or "0" without size
#   - "-" and "0" together
#   - "+" and " " together
# - Format sequence:
#   - %[format arguments]<format specifier> # e.g.: %+d
#     - [format arguments]: 0 or more
#     - <format specifier>: 1

test.value = A value in a translation

# EXAMPLEs:
func.println(func.format(Simple "%%" sign!))
func.printf(A simple text: "%s"%n, TEST - ABC)
func.printf(A simple translation value: "%t"%n, test.value)
func.printf(Lang name "%15t"\, lang file version "%-15t"%n, lang.name, lang.version)
func.printf(Numbers: %04d %04d %04d%n, 42, 43, 44)
func.printf(Numbers: %0*d %0*d %0*d%n, 2, 42, 3, 43, 4, 44)
func.printf(Bin numbers: %08b %08b%n, 42, -42)
func.printf(Oct numbers: %08o %08o%n, 42, -42)
func.printf(Hex numbers: %08x %08x%n, 42, -42)
func.printf(Floating point numbers: %-*.*f $%n, 10, 2, 20.2567)
func.printf(Floating point numbers: %-+10.*f $%n, 2, 20.2367) # "+" must be behind "-"
func.printf(Floating point numbers: %0*.2f $%n, 10, 20.2567)
func.printf(Floating point numbers: %+010.2f $%n, 20.2367)
func.printf(Floating point number (Rounded to 0 decimal places): %+010.0f%n, 20.2367)
func.printf(Numbers: %+07.2f%n%9c%+07.2f%n%9c%+07.2f%n%9c%+07.2f%n, 20.2367, \s, -42.1, \s, 42.2, \s, -900.2)
func.printf(Numbers: % 07.2f%n%9c% 07.2f%n%9c% 07.2f%n%9c% 07.2f%n, 20.2367, \s, -42.1, \s, 42.2, \s, -900.2)
func.println(func.format(%c, 65)) # A
func.println(func.format(%c, 8364)) # €
func.println(func.format(|%10c|, 65)) # |         A|
func.println(func.format(|%-10c|, 65)) # |A         |
func.errorf(Error "%s" was thrown!%n, func.errorText($LANG_ERROR_DIV_BY_ZERO))
func.printf(%c%n, t) # Posible because of implicit cast from CHAR to number
func.printf(%s %[1]s%n, test)
func.printf(%[2]s%n, test, abc)
func.printf(%[2]05d%n, test, 42)
func.printf(%[1]s%n, test\!42\!\eabc0)
func.printf(%[1]s%n, {{{testabc[]+01294378?=}}})
func.printf(%[0]s%n)
func.println(func.format(%5s: %[1]-+5d\, %[1]- 5.2f, 42.528))
func.println(func.format(%[1]15d [Base 10] %[1]15b [Base 2] %[1]15o [Base 8] %[1]15x [Base 16], 4200))
func.println(func.format(%-15s \= %[1]-15t, test.value))
func.println(func.format(%*[3]d\, %0*[3]d, 42, -42, 5))
func.println(func.format(%[3]*[2]d, x, 9, 42.125))
func.println(func.format(%*[2]f, 42.125, 9))
func.println(func.format(%*[2].4f, 42.125, 9))
func.println(func.format(%0*[2].4f, 42.125, 9))
func.println(func.format(%10.*[2]f, 42.1255, 2))
func.println(func.format(%+10.*[2]f, 42.1255, 3))
func.println(func.format(%+*.*[3]f, 10, 42.1255, 3))
func.println(func.format(%[6]+*.*[5]f, 10, x, y, z, 3, 42.1255))
func.println(func.format(%-*[6].*[5]f, 42.1255, x, y, z, 3, 10))
func.println(func.format(%[1]*[2].*[3]f, 42.1255, 10, 3))
func.println(func.format(%?, 0))
func.println(func.format(%s: %[1]?, \e))
func.println(func.format(%s: %[1]?, func.arrayMake(0)))
func.println(func.format(%s: %[1]?, .0))
func.println(func.format(%s: %[1]?, null))
func.println(func.format(%s: %[1]?, func.print(\e)))
func.println(func.format(%s: %[1]?, 1))
func.println(func.format(%s: %[1]?, test))
func.println(func.format(%s: %[1]?, func.arrayOf(abc)))
func.println(func.format(%s: %[1]?, func.println))
func.println(func.format(%s: %[1]?, func.pointerTo(42)))

func.println()

# EXAMPLEs of errors:
func.printf(Translation key not found: %t, test.not.found)
func.printf(Test %-s, test)
func.printf(Test %*s, abc, 20)
func.printf(Test %d, test)
func.printf(Test %s)
func.printf(Test %2.2.2f, 42.24)
func.printf(Test %*s, -2, test)
func.printf(Test %*.*f, 2, -1, 42)
func.printf(Test %*.*f, -2, 1, 42)
func.printf(Test %*.*f, -2, -1, 42)
func.printf(Test %.00f%n, 20.2367) # No digits allowed after ".0"
func.printf(Test %.01f%n, 20.2367) # No digits allowed after ".0"
func.printf(Test %+ d, 42)
func.printf(%c%n, {{{t}}})
func.printf(%[1]n, test)
func.printf(%[\0]s%n)
func.printf(%[2]d%n, test, abc, t)
func.printf(%[20]d%n, test, 42, t)
func.printf(%[205d%n, test, 42)
func.printf(%[ab]d%n, test, 42)
func.printf(%s%[1]f%n, abc)
func.printf(%*[1].*[2].2f%n, 42.2, 2)
func.printf(%5.*[x]f%n, 2, 3)
func.printf(%5.*[-1]f%n, 2, 3)

func.println()
func.println()

# Template translations
# - Template variables: {varName}
#   - Will be replaced with an acutal value if translation was requested as template translation
#   - "{" can be escaped with "{{"
example.trans.0 = You are in world {world}!
example.trans.1 = You are in world {world} as player {player}! # Multiple templates can be used (A template can be used more then once)
example.trans.2 = You are in world {{world}! # Will be escaped as text: {world}
# Provided template values will be ignored if not used
# If a undefined template value is used, an error will be thrown
# Template translations can not yet be used inside lang

func.println()
func.println()

# Pluralization template translations
# - Templates for translations with different pluralizations
# - The template variable {count} can be used to access the count value ("{" can be escaped with "{{")
# - A Pluralization template consists of pluralization tokens which are seperated by ";" (";" can be escaped with ";;") - the ";" of the last token can be dropped:
#   - [<count values>]<Translation>
#   - Count values:
#     - A comma (",") seperated lists of count ranges:
#       - A count range can either be a single number (e.g.: 0, 1, 2, ...) or a range (e.g. 0-10, 2-4, ...) or a infinte range (e.g. 0+, 1+, 20+, ...)
#       - Counts are not allowed to be less then 0
#     - If the provided count was not defined by any pluralization token, an error will be thrown
#     - If the provided count was defined more then once, the first token including the count will be returned
#  - Pluralization templates can be requested and used with "func.getTranslationValueTemplatePluralization($count, $translationKey)" and "func.formatTranslationTemplatePluralization($count, $text)"
plural.example.0 = [0+]{count}x orange
func.println(func.getTranslationValueTemplatePluralization(0, plural.example.0))
func.println(func.getTranslationValueTemplatePluralization(1, plural.example.0))
func.println(func.getTranslationValueTemplatePluralization(2, plural.example.0))
func.println(func.getTranslationValueTemplatePluralization(10, plural.example.0))

func.println()

plural.example.1 = [0,2+]{count} oranges;[1]1 orange
func.println(func.getTranslationValueTemplatePluralization(0, plural.example.1))
func.println(func.getTranslationValueTemplatePluralization(1, plural.example.1))
func.println(func.getTranslationValueTemplatePluralization(2, plural.example.1))
func.println(func.getTranslationValueTemplatePluralization(3, plural.example.1))
func.println(func.getTranslationValueTemplatePluralization(10, plural.example.1))

func.println()

plural.example.2 = [1]1 orange;[3]{count}x orange;[2-5]{count} oranges
func.println(func.getTranslationValueTemplatePluralization(0, plural.example.2)) # Error
func.println(func.getTranslationValueTemplatePluralization(1, plural.example.2))
func.println(func.getTranslationValueTemplatePluralization(2, plural.example.2))
func.println(func.getTranslationValueTemplatePluralization(3, plural.example.2)) # Will print "3x orange"
func.println(func.getTranslationValueTemplatePluralization(10, plural.example.2)) # Error

func.println()

plural.example.3 = {count} oranges
func.println(func.getTranslationValueTemplatePluralization(0, plural.example.3)) # Error (Invalid format)

func.println()

plural.example.4 = [0]Value with ";;";[1+]Other values ({{count}: {count})
func.println(func.getTranslationValueTemplatePluralization(0, plural.example.4))
func.println(func.getTranslationValueTemplatePluralization(1, plural.example.4))
func.println(func.getTranslationValueTemplatePluralization(20, plural.example.4))

func.println()

# %t with pluralization template translations
func.printf(%.0t%n, plural.example.0)
func.printf(%.1t%n, plural.example.0)
func.printf(%.25t%n, plural.example.0)
func.println(---)
func.printf(%.*t%n, 0, plural.example.1)
func.printf(%.*t%n, 1, plural.example.1)
func.printf(%.*t%n, 2, plural.example.1)
func.printf(%.*t%n, 5, plural.example.1)
func.println(---)
func.printf(%.*[2]t%n, plural.example.2, 0) # Error
func.printf(%.*[2]t%n, plural.example.2, 1)
func.printf(%.*[2]t%n, plural.example.2, 3)
func.printf(%.*[2]t%n, plural.example.2, 5)
func.println(---)
func.printf(|%20.0t|%n, plural.example.1)
func.printf(|%-20.1t|%n, plural.example.1)

func.println()

# If any (pluralization) template translation was loaded without template functions, the whole translation will be returned as text as is
func.printf(%t%n, example.trans.0)
func.printf(%t%n, example.trans.1)
func.printf(%t%n, example.trans.2)
func.printf(%t%n, plural.example.0)
func.printf(%t%n, plural.example.1)
func.printf(%t%n, plural.example.2)
func.printf(%t%n, plural.example.3)
