lang.name = Benchmark
lang.version = v1.0.0

fp.benchmark = ($runs, fp.func) -> {
	$time = 0
	$i = 0
	con.repeat($[i], $runs)
		$start = func.currentTimeMillis()
		fp.func()
		$end = func.currentTimeMillis()
		$time = func.addl($time, func.subl($end, $start))
	con.endloop
	
	return func.divd($time, $runs)
}

func.println(Enter 0 for "Normal functions benchmark" and 1 for "One-line functions benchmark")
$input = func.input()

con.if(!func.toNumber($input))
	# Normal functions
	fp.empty = () -> {
	}
	fp.add = () -> {
		func.addi(func.rand(), func.rand())
	}
	fp.execFP = () -> {
		fp.test = () -> {
			test = test
		}
		fp.test()
	}
	fp.arrayCreation = () -> {
		func.arrayMake(&a, 100)
		func.arraySetAll(&a, 42)
	}
	fp.linker = () -> {
		linker.link(items.lang)
	}
	fp.bindLib = () -> {
		linker.bindLibrary(items.lang)
	}
	fp.sleep = () -> {
		func.sleep(1)
	}

	func.println(\s          Normal functions           \s)
con.else
	# One-line functions
	fp.empty = () -> {
	}
	fp.add = () -> func.addi(func.rand(), func.rand())
	fp.execFP = () -> {
		fp.test = () -> test = test
		fp.test()
	}
	fp.arrayCreation = () -> func.arrayMake(&a, 100) func.arraySetAll(&a, 42)
	fp.linker = () -> linker.link(items.lang)
	fp.bindLib = () -> linker.bindLibrary(items.lang)
	fp.sleep = () -> func.sleep(1)

	func.println(\s         One-line functions          \s)
con.endif

func.println(\s      Test        |       Time       \s)
func.println(-------------------|-------------------)
func.println(Empty              | fp.benchmark(1000, fp.empty) ms)
func.println(Add                | fp.benchmark(1000, fp.add) ms)
func.println(Execute FP         | fp.benchmark(1000, fp.execFP) ms)
func.println(Array creation     | fp.benchmark(1000, fp.arrayCreation) ms)
func.println(Linker             | fp.benchmark(1000, fp.linker) ms)
func.println(Bind Library       | fp.benchmark(1000, fp.bindLib) ms)
func.println(Sleep (Should be 1)| fp.benchmark(1000, fp.sleep) ms)
func.println(---------------------------------------)
